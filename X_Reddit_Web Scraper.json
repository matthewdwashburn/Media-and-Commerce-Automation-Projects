{
  "name": "X/Reddit/Web Scraper",
  "nodes": [
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweet/advanced_search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "from:fasc1nate filter:images"
            },
            {
              "name": "queryType",
              "value": "Latest"
            },
            {
              "name": "cursor",
              "value": "={{ $json.cursor }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -620,
        760
      ],
      "id": "e18dcad5-b5ac-4cc4-b6f7-1f8819de1517",
      "name": "Get Tweets",
      "credentials": {
        "httpHeaderAuth": {
          "id": "wfaQplzpG1UZAAtm",
          "name": "TwitterAPI"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "documentId": {
          "__rl": true,
          "value": "1tOT0qz9uqcEpDP7qq51_Kq-8N4sDVMByE6UkFK-kLAU",
          "mode": "list",
          "cachedResultName": "LowKey Reddit Posts",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1tOT0qz9uqcEpDP7qq51_Kq-8N4sDVMByE6UkFK-kLAU/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1tOT0qz9uqcEpDP7qq51_Kq-8N4sDVMByE6UkFK-kLAU/edit#gid=0"
        },
        "event": "rowAdded",
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTrigger",
      "typeVersion": 1,
      "position": [
        464,
        2112
      ],
      "id": "2de37739-0566-4333-86ec-71e8e7e47220",
      "name": "Google Sheets Trigger1",
      "credentials": {
        "googleSheetsTriggerOAuth2Api": {
          "id": "RO8qbNJ42B8YEZhR",
          "name": "Google Sheets Trigger account 4"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let link = null;\nlet customTitle = null;\n\nconst sheetData = $json;\n\n// Step 1: Try to get Reddit or Twitter link from changes\nif (sheetData.changes && Array.isArray(sheetData.changes)) {\n  for (const change of sheetData.changes) {\n    if (\n      change.new_value &&\n      typeof change.new_value === 'string' &&\n      (change.new_value.includes('reddit.com') || change.new_value.includes('twitter.com'))\n    ) {\n      link = change.new_value;\n      break;\n    }\n\n    if (change.cell.startsWith('B:') && change.new_value) {\n      customTitle = change.new_value;\n    }\n  }\n}\n\n// Step 2: Fallback to other columns if not found in changes\nif (!link) {\n  link = sheetData[\"Links\"] || \n         sheetData[\"Reddit URL\"] || \n         sheetData[\"Twitter URL\"] || \n         sheetData.reddit_url || \n         sheetData.twitter_url || \n         sheetData[\"Column A\"] || \n         (sheetData.newRow && sheetData.newRow[0]);\n}\n\n// Step 3: Validate\nif (!link || typeof link !== 'string') {\n  return [{\n    json: {\n      skipped: true,\n      reason: \"No valid Reddit or Twitter URL found\",\n      receivedData: sheetData\n    }\n  }];\n}\n\n// Step 4: Clean URL and return metadata\nlink = link.trim().split('?')[0];\nconst source = (link.includes('reddit.com')) \n  ? 'reddit' \n  : (link.includes('twitter.com') || link.includes('x.com')) \n    ? 'twitter' \n    : 'unknown';\n\n\nreturn [{\n  json: {\n    link,\n    source,\n    customTitle: customTitle ? customTitle.trim() : null,\n    timestamp: new Date().toISOString(),\n    cellLocation: sheetData.changes?.[0]?.cell || 'unknown'\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        688,
        2112
      ],
      "id": "28f9c55b-75c1-4ce8-aebc-b35e934a15cf",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nconst postData = $json;\nconst openaiKey = $env.OPENAI_API_KEY;\n\nif (postData.error) {\n  console.log(\"‚è≠Ô∏è Skipping GPT generation due to previous error\");\n  return [\n    {\n      json: {\n        reply: \"Error: Could not generate reply\",\n        error: true,\n        originalError: postData.errorMessage\n      }\n    }\n  ];\n}\n\nconsole.log(`ü§ñ Generating GPT reply for: \"${postData.title}\"`);\n\nlet messages;\n\n// Check for usable images\nconst validImage1 = postData.imageUrl && !postData.imageUrl.includes('placeholder');\nconst validImage2 = postData.postUrl2 && !postData.postUrl2.includes('placeholder');\n\nif (validImage1 || validImage2) {\n  console.log(\"üëÅÔ∏è Using GPT Vision for image analysis\");\n\n  const imageInputs = [];\n  if (validImage1) {\n    imageInputs.push({\n      type: \"image_url\",\n      image_url: {\n        url: postData.imageUrl,\n        detail: \"low\"\n      }\n    });\n  }\n  if (validImage2) {\n    imageInputs.push({\n      type: \"image_url\",\n      image_url: {\n        url: postData.postUrl2,\n        detail: \"low\"\n      }\n    });\n  }\n\n  messages = [\n    {\n      role: \"user\",\n      content: [\n        {\n          type: \"text\",\n          text: `Look at this post and reply as if you're a real person scrolling social media, not a bot. Your tone should be chill, observant, and down-to-earth, like someone casually commenting something thoughtful, lighthearted, or insightful without trying too hard. Avoid summarizing the post or restating what‚Äôs already there. Instead, add something new: a reaction, reflection, commentary, or clever detail someone might miss. Never be cringey, sarcastic, overly edgy, or try to be too smart. Just sound like a normal person with emotional awareness and some personality. Don't write in a fake overly positive tone, be down to earth. No gamer or chronically online language (examples include: boss, level, mode, ah yes, plot twist, etc.). No emojis. Keep it under 160 characters. Always lowercase. No quotes, dashes, or robotic formatting.\n\nPost: \"${postData.title}\"`\n        },\n        ...imageInputs\n      ]\n    }\n  ];\n} else {\n  console.log(\"üìù Using text-only GPT\");\n  messages = [\n    {\n      role: \"user\",\n      content: `Look at this post and reply as if you're a real person scrolling social media, not a bot. Your tone should be chill, observant, and down-to-earth, like someone casually commenting something thoughtful, lighthearted, or insightful without trying too hard. Avoid summarizing the post or restating what‚Äôs already there. Instead, add something new: a reaction, reflection, commentary, or clever detail someone might miss. Never be cringey, sarcastic, overly edgy, or try to be too smart. Just sound like a normal person with emotional awareness and some personality. Don't write in a fake overly positive tone, be down to earth. No gamer or chronically online language (examples include: boss, level, mode, ah yes, plot twist, etc.). No emojis. Keep it under 160 characters. Always lowercase. No quotes, dashes, or robotic formatting.\n\nPost: \n\n\"${postData.title}\"`\n    }\n  ];\n}\n\ntry {\n  const gptResponse = await axios.post(\n    \"https://api.openai.com/v1/chat/completions\",\n    {\n      model: \"gpt-4o\",\n      messages,\n      temperature: 0.8,\n      max_tokens: 150\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${openaiKey}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n\n  let reply = gptResponse.data.choices[0].message.content.trim();\n  if ((reply.startsWith('\"') && reply.endsWith('\"')) ||\n      (reply.startsWith(\"'\") && reply.endsWith(\"'\"))) {\n    reply = reply.slice(1, -1).trim();\n  }\n\n  return [\n    {\n      json: {\n        reply,\n        usedVision: !!(validImage1 || validImage2),\n        model: \"gpt-4o\"\n      }\n    }\n  ];\n} catch (error) {\n  console.error(`‚ùå Error generating GPT reply:`, error.message);\n  return [\n    {\n      json: {\n        reply: \"sorry, my brain broke trying to think of a reply ü§ñüí•\",\n        error: true,\n        errorMessage: error.message\n      }\n    }\n  ];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        2112
      ],
      "id": "bde2bb44-56c6-40fa-9833-c342d20de2e3",
      "name": "generate_gpt_reply2"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nconst redditClientId = $env.REDDIT_CLIENT_ID;\nconst redditClientSecret = $env.REDDIT_CLIENT_SECRET;\nconst redditRefreshToken = $env.REDDIT_REFRESH_TOKEN;\nconst openaiKey = $env.OPENAI_API_KEY;\n\nconst link = $json.link || $json.postUrl;\nconst source = $json.source;\nconst customTitle = $json.customTitle;\n\nlet processedTitle = customTitle;\nlet gptProcessingError = null;\n\nasync function getRedditAccessToken() {\n  const params = `grant_type=refresh_token&refresh_token=${encodeURIComponent(redditRefreshToken)}`;\n  const res = await axios.post(\n    'https://www.reddit.com/api/v1/access_token',\n    params,\n    {\n      auth: {\n        username: redditClientId,\n        password: redditClientSecret\n      },\n      headers: {\n        'User-Agent': 'PostFetcher/1.0 by n8n-workflow',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }\n  );\n  return res.data.access_token;\n}\n\nfunction extractTweetId(url) {\n  const match = url.match(/status\\/(\\d+)/);\n  return match ? match[1] : null;\n}\n\nfunction cleanTweetText(text) {\n  return text.replace(/https:\\/\\/t\\.co\\/\\w+/g, '').trim();\n}\n\nasync function extractTwitterContent(url) {\n  console.log(\"üê¶ Fetching content using Twitter API with fallback tokens...\");\n\n  const tweetId = extractTweetId(url);\n  if (!tweetId) throw new Error(\"Could not extract tweet ID\");\n\n  const endpoint = `https://api.twitter.com/2/tweets/${tweetId}`;\n  const params = \"expansions=author_id,attachments.media_keys&tweet.fields=text&user.fields=name&media.fields=url\";\n\n  for (let i = 1; i <= 24; i++) {\n    const tokenEnvKey = `TWITTER_BEARER_TOKEN_${i}`;\n    const bearerToken = $env[tokenEnvKey];\n    if (!bearerToken) continue;\n\n    try {\n      const response = await axios.get(`${endpoint}?${params}`, {\n        headers: {\n          Authorization: `Bearer ${bearerToken}`,\n          \"User-Agent\": \"PostFetcher/1.0 by n8n-workflow\"\n        }\n      });\n\n      const tweet = response.data?.data;\n      const includes = response.data?.includes || {};\n\n      if (!tweet || !tweet.text) throw new Error(\"Tweet data missing from API response\");\n\n      const author = includes.users?.[0]?.name || \"Unknown\";\n      const mediaItems = includes.media?.filter(m => m.url) || [];\n      const imageUrls = mediaItems.slice(0, 2).map(m => m.url);\n\n      console.log(`‚úÖ Successfully fetched tweet with token #${i}`);\n\n      return {\n        text: cleanTweetText(tweet.text),\n        author,\n        imageUrls,\n        method: `twitter_api_token_${i}`\n      };\n    } catch (error) {\n      const status = error.response?.status || 0;\n      const isRateLimit = status === 429 || (error.response?.data?.title === \"Too Many Requests\");\n\n      console.warn(`‚ö†Ô∏è Token #${i} failed: ${error.message}${isRateLimit ? \" (rate limited)\" : \"\"}`);\n      if (!isRateLimit) throw error;\n    }\n  }\nreturn {\n  link,\n  source,\n  customTitle,\n  success: false\n};\n}\n\nasync function processWithGPT(text) {\n  if (!text || text.includes('unavailable') || text.includes('API restrictions')) {\n    return { processed: text, error: null };\n  }\n\n  try {\n    const gptResponse = await axios.post(\n      \"https://api.openai.com/v1/chat/completions\",\n      {\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"user\",\n            content: `Take the following text. If it is an interesting fact, news, or story, rewrite it, but keep the original meaning and information exactly the same. Do not add any new details or make anything up. Keep the rewrite as close to the original content as possible, just improving clarity and flow if needed, keeping the length relatively the same. If it is humorus or a meme, take the following text and return it exactly as written (unless there is a post title prefix. For example: \"TIL\", \"TIL that\", \"TIL of\", etc., you can remove those in any type of text). If there is no text given, don't return anything. I want a completely blank response if there is no text given. If there is any newlines in the text, remove those so it is one continuous block of text: \\n\\n\"${text}\"`\n          }\n        ],\n        temperature: 0.3,\n        max_tokens: 200\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${openaiKey}`,\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    );\n\n    let processed = gptResponse.data.choices[0].message.content.trim();\n    if (\n      (processed.startsWith('\"') && processed.endsWith('\"')) ||\n      (processed.startsWith(\"'\") && processed.endsWith(\"'\"))\n    ) {\n      processed = processed.slice(1, -1);\n    }\n\n    return { processed: processed.trim(), error: null };\n  } catch (error) {\n    return { processed: text, error: error.message };\n  }\n}\n\nif (source === 'twitter') {\n  try {\n    console.log(`üê¶ Fetching Twitter data from: ${link}`);\n\n    const tweetData = await extractTwitterContent(link);\n    const titleToProcess = customTitle || tweetData.text;\n    const gptResult = await processWithGPT(titleToProcess);\n\n    processedTitle = gptResult.processed;\n    gptProcessingError = gptResult.error;\n\n    const [imageUrl1, imageUrl2] = tweetData.imageUrls ?? [];\n    const finalImageUrl = imageUrl1 || \"https://via.placeholder.com/800x600/1DA1F2/ffffff?text=Twitter+Post\";\n\n    if (gptProcessingError) {\n      console.log(\"‚ö†Ô∏è GPT failed, using original text:\", gptProcessingError);\n    }\n\n    return [\n      {\n        json: {\n          title: cleanTweetText(processedTitle),\n          originalTitle: tweetData.text,\n          customTitle,\n          imageUrl: finalImageUrl,\n          postUrl: link,\n          postUrl2: imageUrl2 ?? null,\n          author: tweetData.author,\n          extractionMethod: tweetData.method,\n          source: 'twitter',\n          created: new Date().toISOString(),\n          gptProcessed: !gptProcessingError,\n          gptError: gptProcessingError,\n          success: true\n        }\n      }\n    ];\n  } catch (err) {\n    console.error(\"‚ùå Error fetching Twitter post:\", err.message);\n\n    const tweetId = extractTweetId(link);\n    const fallbackTitle = customTitle ||\n      (tweetId\n        ? `Twitter post ${tweetId} - Content unavailable due to API restrictions`\n        : \"Twitter content unavailable\");\n\n    return [\n      {\n        json: {\n          error: true,\n          errorMessage: err.message,\n          title: fallbackTitle,\n          originalTitle: \"Error fetching tweet\",\n          customTitle,\n          imageUrl: \"https://via.placeholder.com/800x600/FF0000/ffffff?text=Twitter+Error\",\n          postUrl: link,\n          postUrl2: null,\n          gptProcessed: false,\n          source: 'twitter',\n          created: new Date().toISOString()\n        }\n      }\n    ];\n  }\n}\n\n// --- REDDIT HANDLING (unchanged) ---\ntry {\n  const token = await getRedditAccessToken();\n  console.log(`üîÑ Fetching Reddit post data for: ${link}`);\n\n  const urlMatch = link.match(/\\/r\\/([^\\/]+)\\/comments\\/([^\\/]+)/);\n  if (!urlMatch) throw new Error(\"Could not parse Reddit URL format\");\n\n  const [, subreddit, postId] = urlMatch;\n  const apiUrl = `https://oauth.reddit.com/r/${subreddit}/comments/${postId}.json`;\n\n  const response = await axios.get(apiUrl, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"User-Agent\": \"PostFetcher/1.0 by n8n-workflow\"\n    }\n  });\n\n  if (!Array.isArray(response.data) || response.data.length === 0) {\n    throw new Error(\"Invalid API response format\");\n  }\n\n  const postData = response.data[0]?.data?.children?.[0]?.data;\n  if (!postData) throw new Error(\"Could not find post data in response\");\n\n  let imageUrl = postData.url;\n\n  const hasDirectImage = postData.url && (\n    postData.url.includes('.jpg') ||\n    postData.url.includes('.jpeg') ||\n    postData.url.includes('.png') ||\n    postData.url.includes('.gif') ||\n    postData.url.includes('i.redd.it') ||\n    postData.url.includes('i.imgur.com')\n  );\n\n  if (!hasDirectImage) {\n    if (postData.preview?.images?.[0]?.source?.url) {\n      imageUrl = postData.preview.images[0].source.url.replace(/&amp;/g, '&');\n    } else {\n      imageUrl = \"https://via.placeholder.com/800x600/4169E1/white?text=Reddit+Post\";\n    }\n  }\n\n  processedTitle = customTitle || postData.title;\n\n  const gptResult = await processWithGPT(processedTitle);\n  processedTitle = gptResult.processed;\n  gptProcessingError = gptResult.error;\n\n  if (gptProcessingError) {\n    console.log(\"‚ö†Ô∏è GPT failed, using original Reddit title:\", gptProcessingError);\n  }\n\n  return [\n    {\n      json: {\n        title: processedTitle,\n        originalTitle: postData.title,\n        customTitle,\n        imageUrl,\n        postUrl: link,\n        subreddit: postData.subreddit,\n        author: postData.author,\n        score: postData.score,\n        created: new Date(postData.created_utc * 1000).toISOString(),\n        source: 'reddit',\n        gptProcessed: !gptProcessingError,\n        gptError: gptProcessingError,\n        success: true\n      }\n    }\n  ];\n} catch (error) {\n  console.error(\"‚ùå Error fetching Reddit post data:\", error.message);\n\n  return [\n    {\n      json: {\n        error: true,\n        errorMessage: error.message,\n        redditUrl: link,\n        title: customTitle || \"Error fetching post\",\n        originalTitle: \"Error fetching post\",\n        imageUrl: \"https://via.placeholder.com/800x600/FF0000/white?text=Reddit+Error\",\n        postUrl: link,\n        postUrl2: null,\n        gptProcessed: false,\n        source: 'reddit'\n      }\n    }\n  ];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        912,
        2112
      ],
      "id": "097dd2d8-99a0-46dd-a1b6-5fa6b7a1bde3",
      "name": "fetch_reddit_post2"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nconst postData = $items('fetch_reddit_post2')[0].json;  // Updated node: fetch_reddit_post1\nconst gptData = $items('generate_gpt_reply2')[0].json;  // Updated node: generate_gpt_reply1\nconst templatedKey = $env.TEMPLATED_API_KEY;\n\nconsole.log(`üñºÔ∏è Generating Templated.io image based on available Twitter images...`);\n\nasync function waitForTemplateImage(id, apiKey) {\n  const maxAttempts = 10;\n  const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    console.log(`‚åõ Waiting for image (attempt ${attempt})...`);\n    const statusRes = await axios.get(`https://api.templated.io/v1/render/${id}`, {\n      headers: { Authorization: `Bearer ${apiKey}` }\n    });\n\n    if (statusRes.data.url) {\n      return statusRes.data.url;\n    }\n\n    await delay(2000); // wait 2 seconds\n  }\n\n  throw new Error(\"‚ùå Timeout: Template image rendering took too long.\");\n}\n\ntry {\n  const hasSecondImage = postData.postUrl2 && !postData.postUrl2.includes('placeholder');\n  const selectedTemplate = hasSecondImage\n    ? \"2ecdfae9-af2b-433b-93c9-0c38abd5a850\"  // Template for 2 images\n    : \"979e9b7b-7169-468e-90d9-7856afbd1e3e\"; // Template for 1 image\n\n  const layers = {\n    post: {\n      text: postData.title,\n      color_2: \"#FFFF00\"\n    },\n    reply: {\n      text: gptData.reply\n    },\n    image: {\n      image_url: postData.imageUrl\n    }\n  };\n\n  // If two images exist, include second image layer\n  if (hasSecondImage) {\n  layers[\"image-copy\"] = { image_url: postData.postUrl2 };\n}\n\n  const response = await axios.post(\n    \"https://api.templated.io/v1/render\",\n    {\n      template: selectedTemplate,\n      layers,\n      format: \"png\",\n      async: false\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${templatedKey}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n\n  let finalImageUrl;\n\n  if (response.data.url) {\n    finalImageUrl = response.data.url;\n    console.log(`‚úÖ Templated image ready instantly: ${finalImageUrl}`);\n  } else if (response.data.id) {\n    finalImageUrl = await waitForTemplateImage(response.data.id, templatedKey);\n    console.log(`‚úÖ Templated image ready after wait: ${finalImageUrl}`);\n  } else {\n    throw new Error(\"No image URL or template ID returned.\");\n  }\n\n  return [\n    {\n      json: {\n        generatedImageUrl: finalImageUrl,\n        templateId: response.data.id || 'instant',\n        usedVision: !!postData.imageUrl && !postData.imageUrl.includes('placeholder'),\n        success: true\n      }\n    }\n  ];\n\n} catch (error) {\n  console.error(\"‚ùå Error during template image generation:\", error.message);\n\n  return [\n    {\n      json: {\n        generatedImageUrl: null,\n        error: true,\n        errorMessage: error.message\n      }\n    }\n  ];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1344,
        2112
      ],
      "id": "f735a45e-775a-4add-8d46-286827cdc98e",
      "name": "Generate Template2"
    },
    {
      "parameters": {
        "content": "# Scrape Sheets",
        "height": 260,
        "width": 1160,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        400,
        2040
      ],
      "id": "b128b816-a70a-4691-8eed-ed84cd65ec93",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweet/advanced_search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "from:historyinmemes filter:images"
            },
            {
              "name": "queryType",
              "value": "Latest"
            },
            {
              "name": "cursor",
              "value": "={{ $json.cursor }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3500,
        760
      ],
      "id": "1a29a6e5-2ade-4a54-ab34-2682d9731e75",
      "name": "Get Tweets1",
      "credentials": {
        "httpHeaderAuth": {
          "id": "wfaQplzpG1UZAAtm",
          "name": "TwitterAPI"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweet/advanced_search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "from:HistoryInPics filter:images "
            },
            {
              "name": "queryType",
              "value": "Latest"
            },
            {
              "name": "cursor",
              "value": "={{ $json.cursor }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2820,
        760
      ],
      "id": "6c2f7fd2-5a8d-480c-9c76-a5f9c90be54e",
      "name": "Get Tweets2",
      "credentials": {
        "httpHeaderAuth": {
          "id": "wfaQplzpG1UZAAtm",
          "name": "TwitterAPI"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweet/advanced_search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "from:Dexerto filter:images "
            },
            {
              "name": "queryType",
              "value": "Latest"
            },
            {
              "name": "cursor",
              "value": "={{ $json.cursor }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1340,
        760
      ],
      "id": "43f2f2bf-9aae-457b-816f-199ebe174c52",
      "name": "Get Tweets3",
      "credentials": {
        "httpHeaderAuth": {
          "id": "wfaQplzpG1UZAAtm",
          "name": "TwitterAPI"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweet/advanced_search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "from:CultureCrave filter:images "
            },
            {
              "name": "queryType",
              "value": "Latest"
            },
            {
              "name": "cursor",
              "value": "={{ $json.cursor }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2060,
        760
      ],
      "id": "45aaa006-8ea8-4b36-875d-e711f5cf40a6",
      "name": "Get Tweets4",
      "credentials": {
        "httpHeaderAuth": {
          "id": "wfaQplzpG1UZAAtm",
          "name": "TwitterAPI"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nconst postDataArray = $items('fetch_reddit_post7').map(item => item.json);\nconst gptDataArray = $items('generate_gpt_reply7').map(item => item.json);\nconst templatedKey = $env.TEMPLATED_API_KEY;\n\nconsole.log(`üñºÔ∏è Generating ${postDataArray.length} Templated.io images...`);\n\nasync function waitForTemplateImage(id, apiKey) {\n  const maxAttempts = 10;\n  const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n  \n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    console.log(`‚åõ Waiting for image ${id} (attempt ${attempt})...`);\n    const statusRes = await axios.get(`https://api.templated.io/v1/render/${id}`, {\n      headers: { Authorization: `Bearer ${apiKey}` }\n    });\n    \n    if (statusRes.data.url) {\n      return statusRes.data.url;\n    }\n    await delay(2000); // wait 2 seconds\n  }\n  throw new Error(`‚ùå Timeout: Template image rendering took too long for ${id}.`);\n}\n\nasync function generateSingleImage(postData, gptData, index) {\n  try {\n    console.log(`üé® Processing image ${index + 1}: \"${postData.title.substring(0, 50)}...\"`);\n    \n    const response = await axios.post(\n      \"https://api.templated.io/v1/render\",\n      {\n        template: \"979e9b7b-7169-468e-90d9-7856afbd1e3e\", // Replace with your actual template ID\n        layers: {\n          post: {\n            text: postData.title, // this is the *highlighted* version\n            color_2: \"#FFFF00\"\n          },\n          reply: {\n            text: gptData.reply\n          },\n          image: {\n            image_url: postData.imageUrl\n          }\n        },\n        format: \"png\",\n        async: false\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${templatedKey}`,\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    );\n\n    let finalImageUrl;\n    if (response.data.url) {\n      finalImageUrl = response.data.url;\n      console.log(`‚úÖ Image ${index + 1} ready instantly: ${finalImageUrl}`);\n    } else if (response.data.id) {\n      finalImageUrl = await waitForTemplateImage(response.data.id, templatedKey);\n      console.log(`‚úÖ Image ${index + 1} ready after wait: ${finalImageUrl}`);\n    } else {\n      throw new Error(\"No image URL or template ID returned.\");\n    }\n\n    return {\n      json: {\n        generatedImageUrl: finalImageUrl,\n        templateId: response.data.id || 'instant',\n        usedVision: !!postData.imageUrl && !postData.imageUrl.includes('placeholder'),\n        success: true,\n        originalTitle: postData.title,\n        originalImageUrl: postData.imageUrl,\n        gptReply: gptData.reply\n      }\n    };\n\n  } catch (error) {\n    console.error(`‚ùå Error generating image ${index + 1}:`, error.message);\n    return {\n      json: {\n        generatedImageUrl: null,\n        error: true,\n        errorMessage: error.message,\n        originalTitle: postData.title,\n        originalImageUrl: postData.imageUrl,\n        gptReply: gptData.reply\n      }\n    };\n  }\n}\n\ntry {\n  // Ensure we have matching pairs\n  const minLength = Math.min(postDataArray.length, gptDataArray.length);\n  console.log(`üìä Processing ${minLength} post-reply pairs...`);\n\n  // Generate all images\n  const results = [];\n  for (let i = 0; i < minLength; i++) {\n    const result = await generateSingleImage(postDataArray[i], gptDataArray[i], i);\n    results.push(result);\n    \n    // Optional: Add a small delay between requests to avoid rate limiting\n    if (i < minLength - 1) {\n      await new Promise(resolve => setTimeout(resolve, 500));\n    }\n  }\n\n  console.log(`üéâ Successfully processed ${results.length} images!`);\n  return results;\n\n} catch (error) {\n  console.error(\"‚ùå Fatal error in batch image generation:\", error.message);\n  return [{\n    json: {\n      generatedImageUrl: null,\n      error: true,\n      errorMessage: `Batch processing failed: ${error.message}`\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1320,
        1060
      ],
      "id": "c487a631-bf7b-43db-b8c4-497083968e41",
      "name": "generate image"
    },
    {
      "parameters": {
        "content": "# Scrape Reddit Accounts",
        "height": 360,
        "width": 1560,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        680,
        980
      ],
      "id": "69553325-2a0a-4a0d-983c-3eea24c7b0a2",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\nconst openaiKey = $env.OPENAI_API_KEY;\n\n// Get all input items from the previous node (similar to Pipedream's steps.Fetch_Reddit_Posts.$return_value)\nconst allInputItems = $input.all();\nconst posts = allInputItems.map(item => item.json);\n\nconsole.log(`üì• Processing ${posts.length} posts for GPT replies`);\n\nconst results = [];\n\n// Helper function to clean GPT reply of surrounding quotes\nconst cleanReply = (reply) => {\n  if (!reply) return reply;\n  \n  let cleaned = reply.trim();\n  \n  if ((cleaned.startsWith('\"') && cleaned.endsWith('\"')) ||\n      (cleaned.startsWith(\"'\") && cleaned.endsWith(\"'\"))) {\n    cleaned = cleaned.slice(1, -1);\n  }\n  \n  cleaned = cleaned.replace(/^[\"']|[\"']$/g, '');\n  \n  return cleaned.trim();\n};\n\n// Process each post (replicating Pipedream's for loop approach)\nfor (let i = 0; i < posts.length; i++) {\n  const postData = posts[i];\n  const post = postData.title;\n  const redditImageUrl = postData.imageUrl;\n  let gptRes;\n  \n  try {\n    console.log(`üîÑ Generating reply for post ${i + 1}: \"${post?.substring(0, 50)}...\"`);\n    console.log(`üñºÔ∏è Analyzing image: ${redditImageUrl}`);\n    \n    // Prepare messages array - different structure based on whether there's an image\n    let messages;\n    \n    if (redditImageUrl && redditImageUrl.trim() !== '' && !redditImageUrl.includes('placeholder')) {\n      // Use GPT-4 Vision for posts with images\n      console.log(\"üëÅÔ∏è Using GPT Vision for image analysis\");\n      messages = [\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"text\",\n              text: `Look at this post and reply as if you're a real person scrolling social media, not a bot. Your tone should be chill, observant, and down-to-earth, like someone casually commenting something thoughtful, lighthearted, or insightful without trying too hard. Avoid summarizing the post or restating what‚Äôs already there. Instead, add something new: a reaction, reflection, commentary, or clever detail someone might miss. Never be cringey, sarcastic, overly edgy, or try to be too smart. Just sound like a normal person with emotional awareness and some personality. Don't write in a fake overly positive tone, be down to earth. No gamer or chronically online language (examples include: boss, level, mode, ah yes, plot twist, etc.). No emojis. Keep it under 160 characters. Always lowercase. No quotes, dashes, or robotic formatting.\n\nPost: \n              \"${post}\"`\n            },\n            {\n              type: \"image_url\",\n              image_url: {\n                url: redditImageUrl,\n                detail: \"low\"\n              }\n            }\n          ]\n        }\n      ];\n    } else {\n      // Fallback to text-only for posts without images\n      console.log(\"üìù Using text-only GPT\");\n      messages = [\n        {\n          role: \"user\",\n          content: `Look at this post and reply as if you're a real person scrolling social media, not a bot. Your tone should be chill, observant, and down-to-earth, like someone casually commenting something thoughtful, lighthearted, or insightful without trying too hard. Avoid summarizing the post or restating what‚Äôs already there. Instead, add something new: a reaction, reflection, commentary, or clever detail someone might miss. Never be cringey, sarcastic, overly edgy, or try to be too smart. Just sound like a normal person with emotional awareness and some personality. Don't write in a fake overly positive tone, be down to earth. No gamer or chronically online language (examples include: boss, level, mode, ah yes, plot twist, vibes, energy) No emojis. Keep it under 160 characters. Always lowercase. No quotes, dashes, or robotic formatting.\n\nPost: \"${post}\"`\n        }\n      ];\n    }\n    \n    gptRes = await axios.post(\n      \"https://api.openai.com/v1/chat/completions\",\n      {\n        model: \"gpt-4o\",\n        messages: messages,\n        temperature: 0.8,\n        max_tokens: 150\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${openaiKey}`,\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    \n    const rawReply = gptRes.data.choices[0].message.content;\n    const reply = cleanReply(rawReply);\n    console.log(`‚úÖ GPT reply (cleaned): \"${reply}\"`);\n    \n    results.push({ \n      ...postData, // Include all original post data\n      reply, \n      usedVision: !!(redditImageUrl && redditImageUrl.trim() !== '' && !redditImageUrl.includes('placeholder')),\n      model: \"gpt-4o\",\n      replyGenerated: true,\n      replyError: null\n    });\n    \n    // Add small delay to avoid rate limiting\n    if (i < posts.length - 1) {\n      await new Promise(resolve => setTimeout(resolve, 500));\n    }\n    \n  } catch (error) {\n    console.error(`‚ùå Error generating response for post ${i + 1}:`, error.message);\n    console.error(\"Error details:\", error.response?.data);\n    \n    results.push({ \n      ...postData,\n      reply: gptRes?.data?.choices?.[0]?.message?.content ? cleanReply(gptRes.data.choices[0].message.content) : \"sorry, my brain broke trying to think of a reply ü§ñüí•\",\n      usedVision: false,\n      model: \"gpt-4o\",\n      replyGenerated: false,\n      replyError: error.message\n    });\n  }\n}\n\nconst successCount = results.filter(r => r.replyGenerated).length;\nconsole.log(`‚úÖ Generated replies for ${successCount}/${results.length} posts`);\n\n// Log sample results\nconsole.log(`üìã Sample results:`, \n  results.slice(0, 2).map(r => ({ \n    title: r.title?.substring(0, 40) + '...',\n    reply: r.reply?.substring(0, 50) + '...',\n    usedVision: r.usedVision,\n    success: r.replyGenerated\n  })));\n\n// Return array of results for n8n to process (similar to Pipedream's return results)\nreturn results.map(result => ({ json: result }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        1060
      ],
      "id": "4489bfdc-309f-44ea-9d91-d8831ffae288",
      "name": "generate_gpt_reply7"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nconst redditClientId = $env.REDDIT_CLIENT_ID;\nconst redditClientSecret = $env.REDDIT_CLIENT_SECRET;\nconst redditRefreshToken = $env.REDDIT_REFRESH_TOKEN;\nconst openaiKey = $env.OPENAI_API_KEY;\n\nasync function getRedditAccessToken() {\n  const params = `grant_type=refresh_token&refresh_token=${encodeURIComponent(redditRefreshToken)}`;\n\n  const res = await axios.post(\n    'https://www.reddit.com/api/v1/access_token',\n    params,\n    {\n      auth: {\n        username: redditClientId,\n        password: redditClientSecret\n      },\n      headers: {\n        'User-Agent': 'PostFetcher/1.0 by n8n-workflow',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }\n  );\n\n  return res.data.access_token;\n}\n\nconst subreddits = [\n  'interestingasfuck',\n  'BeAmazed', \n  'Damnthatsinteresting',\n  'madlads',\n  'mildlyinteresting',\n  'interesting',\n  'MadeMeSmile',\n  'Movies',\n  'Music',\n  'popculturechat',\n  'todayilearned',\n  'pics',\n];\n\ntry {\n  console.log(`üîÑ Fetching posts from ${subreddits.length} subreddits...`);\n  \n  // Get fresh access token\n  const token = await getRedditAccessToken();\n  \n  // Fetch posts from all subreddits concurrently\n  const subredditResults = await Promise.allSettled(\n    subreddits.map(async (subreddit) => {\n      try {\n        console.log(`üì° Fetching from r/${subreddit}...`);\n        \n        const res = await axios.get(`https://oauth.reddit.com/r/${subreddit}/top.json?limit=30`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"User-Agent\": \"PostFetcher/1.0 by n8n-workflow\"\n          }\n        });\n        \n        // Filter posts that have images - FIXED LOGIC\n        const postsWithImages = res.data.data.children\n          .map(p => p.data)\n          .filter(post => {\n            // Exclude video posts explicitly (but allow GIFs)\n            if (post.is_video || \n                post.post_hint === 'hosted:video' || \n                post.post_hint === 'rich:video' ||\n                post.domain === 'v.redd.it' ||\n                post.url.includes('v.redd.it') ||\n                post.url.includes('youtube.com') ||\n                post.url.includes('youtu.be') ||\n                post.url.includes('vimeo.com') ||\n                post.url.includes('tiktok.com') ||\n                post.url.includes('.mp4') ||\n                post.url.includes('.webm') ||\n                post.url.includes('.mov') ||\n                post.url.includes('.avi')) {\n              return false;\n            }\n            \n            // Check if post has a direct image URL (including GIFs)\n            const hasDirectImage = post.url && (\n              post.url.includes('.jpg') || \n              post.url.includes('.jpeg') || \n              post.url.includes('.png') || \n              post.url.includes('.gif') ||\n              post.url.includes('i.redd.it') ||\n              post.url.includes('i.imgur.com')\n            );\n            \n            // Check if post has preview images (REMOVED restrictive post_hint check)\n            const hasPreview = post.preview && \n              post.preview.images && \n              post.preview.images.length > 0 &&\n              post.preview.images[0].source;\n            \n            const hasImage = hasDirectImage || hasPreview;\n            \n            // Debug logging for first few posts\n            if (res.data.data.children.indexOf(res.data.data.children.find(c => c.data === post)) < 5) {\n              console.log(`üîç Post \"${post.title.substring(0, 50)}...\":`, {\n                hasDirectImage,\n                hasPreview,\n                hasImage,\n                url: post.url,\n                post_hint: post.post_hint,\n                domain: post.domain,\n                previewExists: !!post.preview\n              });\n            }\n            \n            return hasImage;\n          })\n          .slice(0, 10) // Scrape certain amount of posts per subreddit\n          .map(post => {\n            let imageUrl = post.url;\n            \n            // Use the same logic as the working script\n            const hasDirectImage = post.url && (\n              post.url.includes('.jpg') || \n              post.url.includes('.jpeg') || \n              post.url.includes('.png') || \n              post.url.includes('.gif') ||\n              post.url.includes('i.redd.it') ||\n              post.url.includes('i.imgur.com')\n            );\n\n            if (!hasDirectImage) {\n              if (post.preview?.images?.[0]?.source?.url) {\n                imageUrl = post.preview.images[0].source.url.replace(/&amp;/g, '&');\n              } else {\n                imageUrl = \"https://via.placeholder.com/800x600/4169E1/white?text=Reddit+Post\";\n              }\n            }\n            \n            return {\n              title: post.title,\n              originalTitle: post.title,\n              imageUrl: imageUrl,\n              postUrl: `https://reddit.com${post.permalink}`,\n              postHint: post.post_hint,\n              domain: post.domain,\n              author: post.author,\n              score: post.score,\n              subreddit: post.subreddit,\n              created: new Date(post.created_utc * 1000).toISOString(),\n              sourceSubreddit: subreddit\n            };\n          });\n        \n        console.log(`‚úÖ r/${subreddit}: Found ${postsWithImages.length} posts with images`);\n        return postsWithImages;\n        \n      } catch (error) {\n        console.error(`‚ùå Error fetching from r/${subreddit}:`, error.message);\n        return []; // Return empty array for failed subreddits\n      }\n    })\n  );\n  \n  // Combine all successful results\n  const allPosts = subredditResults\n    .filter(result => result.status === 'fulfilled')\n    .flatMap(result => result.value)\n    .filter(post => post && post.title); // Remove any null/undefined posts\n  \n  console.log(`‚úÖ Total posts collected: ${allPosts.length} from ${subreddits.length} subreddits`);\n  \n  if (allPosts.length === 0) {\n    console.log(\"‚ö†Ô∏è No posts with images found from any subreddit\");\n    return [];\n  }\n  \n  // Sort posts by score (popularity) and take top posts\n  const sortedPosts = allPosts.sort((a, b) => b.score - a.score);\n  \n  // Process titles with GPT to highlight important parts\n  console.log(\"ü§ñ Processing titles with GPT for highlighting...\");\n  \n  const processedPosts = await Promise.allSettled(\n    sortedPosts.map(async (post, index) => {\n      try {\n        // Add small delay to avoid rate limiting\n        if (index > 0 && index % 10 === 0) {\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n        \n        console.log(`ü§ñ Processing post ${index + 1}/${sortedPosts.length} from r/${post.sourceSubreddit}: \"${post.title.substring(0, 50)}...\"`);\n        \n        const gptResponse = await axios.post(\n          \"https://api.openai.com/v1/chat/completions\",\n          {\n            model: \"gpt-4o\",\n            messages: [\n              {\n                role: \"user\",\n                content: `Take the following text. If it is an interesting fact, news, or story, rewrite it, but keep the original meaning and information exactly the same. Do not add any new details or make anything up. Keep the rewrite as close to the original content as possible, just improving clarity and flow if needed, keeping the length relatively the same. If it is humorus or a meme, take the following text and return it exactly as written (unless there is a post title prefix. For example: \"TIL\", \"TIL that\", \"TIL of\", etc., you can remove those in any type of text). If there is no text given, don't return anything. I want a completely blank response if there is no text given. If there is any newlines in the text, remove those so it is one continuous block of text: \\n\\n\n\"${post.title}\"`\n              }\n            ],\n            temperature: 0.3,\n            max_tokens: 200\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${openaiKey}`,\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        );\n        \n        let gptProcessedTitle = gptResponse.data.choices[0].message.content;\n        \n        // Clean the response of surrounding quotes\n        gptProcessedTitle = gptProcessedTitle.trim();\n        if ((gptProcessedTitle.startsWith('\"') && gptProcessedTitle.endsWith('\"')) ||\n            (gptProcessedTitle.startsWith(\"'\") && gptProcessedTitle.endsWith(\"'\"))) {\n          gptProcessedTitle = gptProcessedTitle.slice(1, -1);\n        }\n        gptProcessedTitle = gptProcessedTitle.replace(/^[\"']|[\"']$/g, '').trim();\n        \n        return {\n          ...post,\n          title: gptProcessedTitle,\n          gptProcessed: true,\n          gptError: null\n        };\n        \n      } catch (gptError) {\n        console.error(`‚ö†Ô∏è GPT processing failed for post ${index + 1}:`, gptError.message);\n        return {\n          ...post,\n          gptProcessed: false,\n          gptError: gptError.message\n        };\n      }\n    })\n  );\n  \n  // Extract results from Promise.allSettled\n  const finalPosts = processedPosts.map((result, index) => {\n    if (result.status === 'fulfilled') {\n      return result.value;\n    } else {\n      console.error(`‚ùå Failed to process post ${index + 1}:`, result.reason);\n      return {\n        ...sortedPosts[index],\n        gptProcessed: false,\n        gptError: result.reason?.message || 'Unknown error'\n      };\n    }\n  });\n  \n  const successfullyProcessed = finalPosts.filter(p => p.gptProcessed).length;\n  const subredditCounts = finalPosts.reduce((acc, post) => {\n    acc[post.sourceSubreddit] = (acc[post.sourceSubreddit] || 0) + 1;\n    return acc;\n  }, {});\n  \n  console.log(`‚úÖ GPT processing complete: ${successfullyProcessed}/${finalPosts.length} posts successfully highlighted`);\n  console.log(`üìä Posts per subreddit:`, subredditCounts);\n  \n  console.log(`üìã Sample results:`, \n    finalPosts.slice(0, 3).map(p => ({ \n      subreddit: p.sourceSubreddit,\n      originalTitle: p.originalTitle?.substring(0, 40) + '...',\n      processedTitle: p.title?.substring(0, 40) + '...',\n      score: p.score,\n      gptProcessed: p.gptProcessed\n    })));\n  \n  return finalPosts.map(post => ({ json: post }));\n  \n} catch (error) {\n  console.error(\"‚ùå Error in multi-subreddit fetch:\", error.response?.data || error.message);\n  throw error;\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        940,
        1060
      ],
      "id": "0234fe9a-9058-4f94-9edc-c74e56f9dcef",
      "name": "fetch_reddit_post7"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bc47f40e-0850-4762-9efb-999608a2c096",
              "name": "counter",
              "value": "={{ $json.count }}",
              "type": "number"
            },
            {
              "id": "92034c06-3976-4099-a7a5-28a252204472",
              "name": "cursor",
              "value": "={{ $json.cursor }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2980,
        1080
      ],
      "id": "8cfc187f-6f0c-4791-94f5-79c84771b1b4",
      "name": "Counter5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b2f9c3c3-32f4-48b4-b72f-76f03c35b750",
              "name": "count",
              "value": 1,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3220,
        1080
      ],
      "id": "1786578e-e818-4186-ab84-e3a78e0d71aa",
      "name": "Set Count5"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "928894d0-2876-4996-9b1e-3d365b903771",
              "leftValue": "={{ $('Counter5').first().json.counter }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1880,
        1080
      ],
      "id": "b4643826-7866-46f1-bc17-218948c78e04",
      "name": "If5"
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweet/advanced_search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "filter:images min_faves:20000"
            },
            {
              "name": "queryType",
              "value": "Latest"
            },
            {
              "name": "cursor",
              "value": "={{ $json.cursor }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2800,
        1080
      ],
      "id": "0104cbbb-8b2b-490d-b744-8c1fb8e5b621",
      "name": "Get Tweets5",
      "credentials": {
        "httpHeaderAuth": {
          "id": "wfaQplzpG1UZAAtm",
          "name": "TwitterAPI"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "content": "# Checking Count\n",
        "height": 360,
        "width": 540
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2140,
        980
      ],
      "id": "5eaf71b2-e7a5-4483-abe7-aa49b6401746",
      "name": "Sticky Note18"
    },
    {
      "parameters": {
        "content": "# Scrape Top of X",
        "height": 360,
        "width": 1400,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3560,
        980
      ],
      "id": "a9fa971c-060c-4747-8fc9-75edda563784",
      "name": "Sticky Note19"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE",
          "mode": "list",
          "cachedResultName": "Mega Scraper",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/198eVrwv-DsPmXNkl6N8UBOFMyLhzWOWrlvdxCMji_8w/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tweetId": "={{ $json.tweetId }}",
            "url": "={{ $json.url }}",
            "content": "={{ $json.content }}",
            "likeCount": "={{ $json.likeCount }}",
            "retweetCount": "={{ $json.retweetCount }}",
            "replyCount": "={{ $json.replyCount }}",
            "quoteCount": "={{ $json.quoteCount }}",
            "viewCount": "={{ $json.viewCount }}",
            "createdAt": "={{ $json.createdAt }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "tweetId",
              "displayName": "tweetId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "likeCount",
              "displayName": "likeCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "retweetCount",
              "displayName": "retweetCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "replyCount",
              "displayName": "replyCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "quoteCount",
              "displayName": "quoteCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "createdAt",
              "displayName": "createdAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -2120,
        1080
      ],
      "id": "51feeddc-afa7-4b64-9f61-a033729ac7c9",
      "name": "Add to Sheet5",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "baFtSmtHN5MM7DfO",
          "name": "Google Sheets account 3"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const tweets = $input.item.json.tweets;\n\nif (tweets && Array.isArray(tweets)) {\n  return tweets.map(tweet => ({\n    json: {\n      tweetId: tweet.id,\n      url: tweet.url,\n      content: tweet.text?.replace(/https?:\\/\\/t\\.co\\/\\S+/g, '').trim() || '',\n      likeCount: tweet.likeCount || 0,\n      retweetCount: tweet.retweetCount || 0,\n      replyCount: tweet.replyCount || 0,\n      quoteCount: tweet.quoteCount || 0,\n      viewCount: tweet.viewCount || 0,\n      createdAt: tweet.createdAt || ''\n    }\n  }));\n} \n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2600,
        1080
      ],
      "id": "9808243a-1bef-4a5b-b66d-59711934e2c3",
      "name": "Extract Info5",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a252eb06-03cd-4e3f-84b0-2a46082606ca",
              "name": "counter",
              "value": "={{ $('Counter5').first().json.counter }}",
              "type": "number"
            },
            {
              "id": "43222ff8-c354-4afa-b050-7d55fe30c865",
              "name": "cursor",
              "value": "={{ $('Get Tweets5').first().json.next_cursor }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2700,
        440
      ],
      "id": "2272bc50-ea05-4837-933d-dd552aff390b",
      "name": "Set Increase"
    },
    {
      "parameters": {
        "jsCode": "// This code should be placed in an n8n Function node\n\n// Get the input items\nconst items = $input.all();\n\n// Process each item in the array\nreturn items.map(item => {\n  // Create a new value for the count field\n  let newCount = 1;\n  \n  // If there's an existing counter value, use it as a base\n  if (item.json && item.json.counter !== undefined) {\n    newCount = item.json.counter + 1;\n  }\n  \n  // Ensure json property exists\n  if (!item.json) {\n    item.json = {};\n  }\n  \n  // Set the value to the new field name \"count\"\n  item.json.count = newCount;\n  \n  // Return the modified item\n  return item;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2520,
        440
      ],
      "id": "0bc76e09-7518-425a-b8e3-d77f4db5312f",
      "name": "Increase Count"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5be1f203-28ea-4635-b42d-01f2a5bb367f",
              "name": "count",
              "value": "={{ $json.count }}",
              "type": "string"
            },
            {
              "id": "b68f8c17-c045-4b5b-8f8b-367ec72b72a3",
              "name": "cursor",
              "value": "={{ $('Set Increase').first().json.cursor }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2340,
        440
      ],
      "id": "5818e8cc-7ea6-4c80-9a96-39f727c9e796",
      "name": "Set Count and Cursor"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -2880,
        440
      ],
      "id": "501da7ec-98cc-400f-975d-bb7920d2f7a9",
      "name": "Limit"
    },
    {
      "parameters": {
        "content": "# Increasing Count & Cursor\n",
        "height": 260,
        "width": 1400,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3560,
        380
      ],
      "id": "3c296a33-ceb7-43c4-939f-a4c18adc68c9",
      "name": "Sticky Note20"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE",
          "mode": "list",
          "cachedResultName": "Mega Scraper",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -1340,
        1100
      ],
      "id": "862e1f46-838a-4cd2-8e13-1d53882efdc6",
      "name": "Google Sheets10",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "IBSllZPSYK4EDII0",
          "name": "Google Sheets account 4"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rows = $input.all();\nconst seen = new Set();\nconst uniqueRows = [];\n\nconst keyField = 'tweetId';\n\nfunction isTemplateRow(row) {\n  return Object.values(row.json).some(\n    val => typeof val === 'string' && val.trim().startsWith('{{ $json.')\n  );\n}\n\nfor (const row of rows) {\n  const key = row.json[keyField];\n\n  if (!key || seen.has(key)) continue;\n  if (isTemplateRow(row)) continue;\n\n  seen.add(key);\n  uniqueRows.push(row.json);\n}\n\nreturn uniqueRows.map(row => ({ json: row }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1180,
        1100
      ],
      "id": "01f52c11-cec0-4858-997c-893c52480229",
      "name": "Code8"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -560,
        1140
      ],
      "id": "2cd60ed9-d190-4400-85a4-3f81e5d500d3",
      "name": "Loop Over Items5"
    },
    {
      "parameters": {
        "jsCode": "// This will cause the node to output no data\nreturn [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1500,
        1100
      ],
      "id": "1ea262d2-047f-443f-a3b8-988b7640d589",
      "name": "Destroy Input11",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "content": "# Generate Image\n",
        "height": 360,
        "width": 1500,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -840,
        980
      ],
      "id": "fd64f05d-26f8-4e76-8193-237b6a1e9b0c",
      "name": "Sticky Note21"
    },
    {
      "parameters": {
        "content": "# Remove Duplicates",
        "height": 360,
        "width": 720,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1580,
        980
      ],
      "id": "46369f69-c9fd-404c-8567-3736d1078ca9",
      "name": "Sticky Note22"
    },
    {
      "parameters": {
        "operation": "delete",
        "documentId": {
          "__rl": true,
          "value": "1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE",
          "mode": "list",
          "cachedResultName": "Mega Scraper",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit#gid=0"
        },
        "numberToDelete": 100
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -160,
        1000
      ],
      "id": "90647f61-517d-46d8-a3e6-3618f6ba65b4",
      "name": "Google Sheets13",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "IBSllZPSYK4EDII0",
          "name": "Google Sheets account 4"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE",
          "mode": "list",
          "cachedResultName": "Mega Scraper",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/198eVrwv-DsPmXNkl6N8UBOFMyLhzWOWrlvdxCMji_8w/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tweetId": "={{ $json.tweetId }}",
            "url": "={{ $json.url }}",
            "content": "={{ $json.content }}",
            "likeCount": "={{ $json.likeCount }}",
            "retweetCount": "={{ $json.retweetCount }}",
            "replyCount": "={{ $json.replyCount }}",
            "quoteCount": "={{ $json.quoteCount }}",
            "viewCount": "={{ $json.viewCount }}",
            "createdAt": "={{ $json.createdAt }}",
            "mediaUrl1": "={{ $json.mediaUrl1 }}",
            "mediaUrl2": "={{ $json.mediaUrl2 }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "tweetId",
              "displayName": "tweetId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "likeCount",
              "displayName": "likeCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "retweetCount",
              "displayName": "retweetCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "replyCount",
              "displayName": "replyCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "quoteCount",
              "displayName": "quoteCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "createdAt",
              "displayName": "createdAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "mediaUrl1",
              "displayName": "mediaUrl1",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "mediaUrl2",
              "displayName": "mediaUrl2",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -3160,
        760
      ],
      "id": "a8f0fd7d-afad-4953-8737-f12de947d183",
      "name": "Add to Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "IBSllZPSYK4EDII0",
          "name": "Google Sheets account 4"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE",
          "mode": "list",
          "cachedResultName": "Mega Scraper",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/198eVrwv-DsPmXNkl6N8UBOFMyLhzWOWrlvdxCMji_8w/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tweetId": "={{ $json.tweetId }}",
            "url": "={{ $json.url }}",
            "content": "={{ $json.content }}",
            "likeCount": "={{ $json.likeCount }}",
            "retweetCount": "={{ $json.retweetCount }}",
            "replyCount": "={{ $json.replyCount }}",
            "quoteCount": "={{ $json.quoteCount }}",
            "viewCount": "={{ $json.viewCount }}",
            "createdAt": "={{ $json.createdAt }}",
            "mediaUrl2": "={{ $json.mediaUrl2 }}",
            "mediaUrl1": "={{ $json.mediaUrl1 }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "tweetId",
              "displayName": "tweetId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "likeCount",
              "displayName": "likeCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "retweetCount",
              "displayName": "retweetCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "replyCount",
              "displayName": "replyCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "quoteCount",
              "displayName": "quoteCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "createdAt",
              "displayName": "createdAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "mediaUrl1",
              "displayName": "mediaUrl1",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "mediaUrl2",
              "displayName": "mediaUrl2",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -1700,
        760
      ],
      "id": "5f592ae2-b297-4e48-aead-5ab2d96ff123",
      "name": "Add to Sheet2",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "IBSllZPSYK4EDII0",
          "name": "Google Sheets account 4"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE",
          "mode": "list",
          "cachedResultName": "Mega Scraper",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/198eVrwv-DsPmXNkl6N8UBOFMyLhzWOWrlvdxCMji_8w/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tweetId": "={{ $json.tweetId }}",
            "url": "={{ $json.url }}",
            "content": "={{ $json.content }}",
            "likeCount": "={{ $json.likeCount }}",
            "retweetCount": "={{ $json.retweetCount }}",
            "replyCount": "={{ $json.replyCount }}",
            "quoteCount": "={{ $json.quoteCount }}",
            "viewCount": "={{ $json.viewCount }}",
            "createdAt": "={{ $json.createdAt }}",
            "mediaUrl1": "={{ $json.mediaUrl1 }}",
            "mediaUrl2": "={{ $json.mediaUrl2 }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "tweetId",
              "displayName": "tweetId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "likeCount",
              "displayName": "likeCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "retweetCount",
              "displayName": "retweetCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "replyCount",
              "displayName": "replyCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "quoteCount",
              "displayName": "quoteCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "createdAt",
              "displayName": "createdAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "mediaUrl1",
              "displayName": "mediaUrl1",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "mediaUrl2",
              "displayName": "mediaUrl2",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -1000,
        760
      ],
      "id": "7baea305-cd48-4da1-a543-e268a1d9c463",
      "name": "Add to Sheet3",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "IBSllZPSYK4EDII0",
          "name": "Google Sheets account 4"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE",
          "mode": "list",
          "cachedResultName": "Mega Scraper",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/198eVrwv-DsPmXNkl6N8UBOFMyLhzWOWrlvdxCMji_8w/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tweetId": "={{ $json.tweetId }}",
            "url": "={{ $json.url }}",
            "content": "={{ $json.content }}",
            "likeCount": "={{ $json.likeCount }}",
            "retweetCount": "={{ $json.retweetCount }}",
            "replyCount": "={{ $json.replyCount }}",
            "quoteCount": "={{ $json.quoteCount }}",
            "viewCount": "={{ $json.viewCount }}",
            "createdAt": "={{ $json.createdAt }}",
            "mediaUrl2": "={{ $json.mediaUrl2 }}",
            "mediaUrl1": "={{ $json.mediaUrl1 }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "tweetId",
              "displayName": "tweetId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "likeCount",
              "displayName": "likeCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "retweetCount",
              "displayName": "retweetCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "replyCount",
              "displayName": "replyCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "quoteCount",
              "displayName": "quoteCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "createdAt",
              "displayName": "createdAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "mediaUrl1",
              "displayName": "mediaUrl1",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "mediaUrl2",
              "displayName": "mediaUrl2",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -300,
        760
      ],
      "id": "f3490de7-f263-49d3-9779-11f20f5bde0b",
      "name": "Add to Sheet4",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "IBSllZPSYK4EDII0",
          "name": "Google Sheets account 4"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// This will cause the node to output no data\nreturn [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1520,
        760
      ],
      "id": "632cca40-b7ad-44ea-8903-2af2838d39da",
      "name": "Destroy Input12",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// This will cause the node to output no data\nreturn [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3000,
        760
      ],
      "id": "5da274a6-2c91-4dfe-833e-98a8fa87df93",
      "name": "Destroy Input13",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// This will cause the node to output no data\nreturn [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -800,
        760
      ],
      "id": "724f2c8b-4823-4675-8602-a9da5f956abc",
      "name": "Destroy Input14",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nconst postData = $json;\nconst openaiKey = $env.OPENAI_API_KEY;\n\nif (postData.error) {\n  console.log(\"‚è≠Ô∏è Skipping GPT generation due to previous error\");\n  return [\n    {\n      json: {\n        reply: \"Error: Could not generate reply\",\n        error: true,\n        originalError: postData.errorMessage\n      }\n    }\n  ];\n}\n\nconsole.log(`ü§ñ Generating GPT reply for: \"${postData.title}\"`);\n\nlet messages;\n\n// Check for usable images\nconst validImage1 = postData.imageUrl && !postData.imageUrl.includes('placeholder');\nconst validImage2 = postData.postUrl2 && !postData.postUrl2.includes('placeholder');\n\nif (validImage1 || validImage2) {\n  console.log(\"üëÅÔ∏è Using GPT Vision for image analysis\");\n\n  const imageInputs = [];\n  if (validImage1) {\n    imageInputs.push({\n      type: \"image_url\",\n      image_url: {\n        url: postData.imageUrl,\n        detail: \"low\"\n      }\n    });\n  }\n  if (validImage2) {\n    imageInputs.push({\n      type: \"image_url\",\n      image_url: {\n        url: postData.postUrl2,\n        detail: \"low\"\n      }\n    });\n  }\n\n  messages = [\n    {\n      role: \"user\",\n      content: [\n        {\n          type: \"text\",\n          text: `Look at this post and reply as if you're a real person scrolling social media, not a bot. Your tone should be chill, observant, and down-to-earth, like someone casually commenting something thoughtful, lighthearted, or insightful without trying too hard. Avoid summarizing the post or restating what‚Äôs already there. Instead, add something new: a reaction, reflection, commentary, or clever detail someone might miss. Never be cringey, sarcastic, overly edgy, or try to be too smart. Just sound like a normal person with emotional awareness and some personality. Don't write in a fake overly positive tone, be down to earth. No gamer or chronically online language (examples include: boss, level, mode, ah yes, plot twist, etc.). No emojis. Keep it under 160 characters. Always lowercase. No quotes, dashes, or robotic formatting.\n\nPost: \"${postData.title}\"`\n        },\n        ...imageInputs\n      ]\n    }\n  ];\n} else {\n  console.log(\"üìù Using text-only GPT\");\n  messages = [\n    {\n      role: \"user\",\n      content: `Look at this post and reply as if you're a real person scrolling social media, not a bot. Your tone should be chill, observant, and down-to-earth, like someone casually commenting something thoughtful, lighthearted, or insightful without trying too hard. Avoid summarizing the post or restating what‚Äôs already there. Instead, add something new: a reaction, reflection, commentary, or clever detail someone might miss. Never be cringey, sarcastic, overly edgy, or try to be too smart. Just sound like a normal person with emotional awareness and some personality. Don't write in a fake overly positive tone, be down to earth. No gamer or chronically online language (examples include: boss, level, mode, ah yes, plot twist, etc.). No emojis. Keep it under 160 characters. Always lowercase. No quotes, dashes, or robotic formatting.\n\nPost: \n\n\"${postData.title}\"`\n    }\n  ];\n}\n\ntry {\n  const gptResponse = await axios.post(\n    \"https://api.openai.com/v1/chat/completions\",\n    {\n      model: \"gpt-4o\",\n      messages,\n      temperature: 0.8,\n      max_tokens: 150\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${openaiKey}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n\n  let reply = gptResponse.data.choices[0].message.content.trim();\n  if ((reply.startsWith('\"') && reply.endsWith('\"')) ||\n      (reply.startsWith(\"'\") && reply.endsWith(\"'\"))) {\n    reply = reply.slice(1, -1).trim();\n  }\n\n  return [\n    {\n      json: {\n        reply,\n        usedVision: !!(validImage1 || validImage2),\n        model: \"gpt-4o\"\n      }\n    }\n  ];\n} catch (error) {\n  console.error(`‚ùå Error generating GPT reply:`, error.message);\n  return [\n    {\n      json: {\n        reply: \"sorry, my brain broke trying to think of a reply ü§ñüí•\",\n        error: true,\n        errorMessage: error.message\n      }\n    }\n  ];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -140,
        1160
      ],
      "id": "88bcec1e-8048-4394-a169-6bda227cadc9",
      "name": "generate_gpt_reply3"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nconst postData = $items('fetch_twitter_post')[0].json;  // Updated node: fetch_reddit_post1\nconst gptData = $items('generate_gpt_reply3')[0].json;  // Updated node: generate_gpt_reply1\nconst templatedKey = $env.TEMPLATED_API_KEY;\n\nconsole.log(`üñºÔ∏è Generating Templated.io image based on available Twitter images...`);\n\nasync function waitForTemplateImage(id, apiKey) {\n  const maxAttempts = 10;\n  const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    console.log(`‚åõ Waiting for image (attempt ${attempt})...`);\n    const statusRes = await axios.get(`https://api.templated.io/v1/render/${id}`, {\n      headers: { Authorization: `Bearer ${apiKey}` }\n    });\n\n    if (statusRes.data.url) {\n      return statusRes.data.url;\n    }\n\n    await delay(2000); // wait 2 seconds\n  }\n\n  throw new Error(\"‚ùå Timeout: Template image rendering took too long.\");\n}\n\ntry {\n  const hasSecondImage = postData.postUrl2 && !postData.postUrl2.includes('placeholder');\n  const selectedTemplate = hasSecondImage\n    ? \"2ecdfae9-af2b-433b-93c9-0c38abd5a850\"  // Template for 2 images\n    : \"979e9b7b-7169-468e-90d9-7856afbd1e3e\"; // Template for 1 image\n\n  const layers = {\n    post: {\n      text: postData.title,\n      color_2: \"#FFFF00\"\n    },\n    reply: {\n      text: gptData.reply\n    },\n    image: {\n      image_url: postData.imageUrl\n    }\n  };\n\n  // If two images exist, include second image layer\n  if (hasSecondImage) {\n  layers[\"image-copy\"] = { image_url: postData.postUrl2 };\n}\n\n  const response = await axios.post(\n    \"https://api.templated.io/v1/render\",\n    {\n      template: selectedTemplate,\n      layers,\n      format: \"png\",\n      async: false\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${templatedKey}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n\n  let finalImageUrl;\n\n  if (response.data.url) {\n    finalImageUrl = response.data.url;\n    console.log(`‚úÖ Templated image ready instantly: ${finalImageUrl}`);\n  } else if (response.data.id) {\n    finalImageUrl = await waitForTemplateImage(response.data.id, templatedKey);\n    console.log(`‚úÖ Templated image ready after wait: ${finalImageUrl}`);\n  } else {\n    throw new Error(\"No image URL or template ID returned.\");\n  }\n\n  return [\n    {\n      json: {\n        generatedImageUrl: finalImageUrl,\n        templateId: response.data.id || 'instant',\n        usedVision: !!postData.imageUrl && !postData.imageUrl.includes('placeholder'),\n        success: true\n      }\n    }\n  ];\n\n} catch (error) {\n  console.error(\"‚ùå Error during template image generation:\", error.message);\n\n  return [\n    {\n      json: {\n        generatedImageUrl: null,\n        error: true,\n        errorMessage: error.message\n      }\n    }\n  ];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        1160
      ],
      "id": "49edd212-06bf-46df-bdec-12278d2c3a81",
      "name": "Generate Template3"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -3440,
        1080
      ],
      "id": "a00866ca-bda6-4385-9a8b-188fc78ec54b",
      "name": "Start Scraping"
    },
    {
      "parameters": {
        "content": "# Scrape X Accounts",
        "height": 300,
        "width": 3460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3560,
        660
      ],
      "id": "f8ed9ae4-84e6-47fc-bd49-f467a282cd5e",
      "name": "Sticky Note23"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\nconst openaiKey = $env.OPENAI_API_KEY;\n\nconst tweets = $input.all().map(item => item.json);\n\nasync function checkIfInteresting(content) {\n  const messages = [\n    {\n      role: \"user\",\n      content: `Determine if the following tweet is either:\n\nAn interesting fact from the past about a celebrity, movie, tv show, public figure, or historical event, or\nA cool, interesting, funny, or unusual story. It can also be interesting current news about well known events, celebrities or public figures, but no fruitless or negative gossip, it must be interesting news. Only consider responding \"yes\" to tweets about things familar to Americans and written in English. Respond only with \"yes\" or \"no\". Do not explain.\n\nTweet:\n\"${content}\"`\n    }\n  ];\n\n  const response = await axios.post(\n    \"https://api.openai.com/v1/chat/completions\",\n    {\n      model: \"gpt-4o\", // or \"gpt-4\", \"gpt-3.5-turbo\"\n      messages,\n      temperature: 0,\n      max_tokens: 3\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${openaiKey}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n\n  const reply = response.data.choices[0].message.content.trim().toLowerCase();\n  return reply === \"yes\";\n}\n\nconst results = [];\n\nfor (const tweet of tweets) {\n  try {\n    const isInteresting = await checkIfInteresting(tweet.content);\n    if (isInteresting) {\n      results.push({ json: tweet });\n    }\n  } catch (err) {\n    console.error(`‚ùå Error analyzing tweet \"${tweet.content}\":`, err.message);\n    // Optionally skip or continue silently\n  }\n}\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2400,
        1080
      ],
      "id": "0a087c80-7c45-4eed-bc06-9106b48ba618",
      "name": "Check If Interesting",
      "alwaysOutputData": true,
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const tweets = $input.item.json.tweets;\n\nif (tweets && Array.isArray(tweets)) {\n  return tweets.map(tweet => {\n    const media = tweet.extendedEntities?.media || [];\n    const mediaUrls = media\n      .map(m => m.media_url_https)\n      .filter(url => typeof url === 'string')\n      .slice(0, 2); // Limit to first 2\n\n    return {\n      json: {\n        tweetId: tweet.id,\n        url: tweet.url,\n        content: tweet.text?.replace(/https?:\\/\\/t\\.co\\/\\S+/g, '').trim() || '',\n        likeCount: tweet.likeCount || 0,\n        retweetCount: tweet.retweetCount || 0,\n        replyCount: tweet.replyCount || 0,\n        quoteCount: tweet.quoteCount || 0,\n        viewCount: tweet.viewCount || 0,\n        createdAt: tweet.createdAt || '',\n        mediaUrl1: mediaUrls[0] || '',\n        mediaUrl2: mediaUrls[1] || ''\n      }\n    };\n  });\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3340,
        760
      ],
      "id": "e13a3949-4b03-4956-8a7f-3d422430bb4c",
      "name": "Extract Info6"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE",
          "mode": "list",
          "cachedResultName": "Mega Scraper",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/198eVrwv-DsPmXNkl6N8UBOFMyLhzWOWrlvdxCMji_8w/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tweetId": "={{ $json.tweetId }}",
            "url": "={{ $json.url }}",
            "content": "={{ $json.content }}",
            "likeCount": "={{ $json.likeCount }}",
            "retweetCount": "={{ $json.retweetCount }}",
            "replyCount": "={{ $json.replyCount }}",
            "quoteCount": "={{ $json.quoteCount }}",
            "viewCount": "={{ $json.viewCount }}",
            "createdAt": "={{ $json.createdAt }}",
            "mediaUrl1": "={{ $json.mediaUrl1 }}",
            "mediaUrl2": "={{ $json.mediaUrl2 }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "tweetId",
              "displayName": "tweetId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "likeCount",
              "displayName": "likeCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "retweetCount",
              "displayName": "retweetCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "replyCount",
              "displayName": "replyCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "quoteCount",
              "displayName": "quoteCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "createdAt",
              "displayName": "createdAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "mediaUrl1",
              "displayName": "mediaUrl1",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "mediaUrl2",
              "displayName": "mediaUrl2",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -2460,
        760
      ],
      "id": "bc5a3c12-da07-4bb7-acce-6666be53399b",
      "name": "Add to Sheet7",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "IBSllZPSYK4EDII0",
          "name": "Google Sheets account 4"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const tweets = $input.item.json.tweets;\n\nif (tweets && Array.isArray(tweets)) {\n  return tweets.map(tweet => {\n    const media = tweet.extendedEntities?.media || [];\n    const mediaUrls = media\n      .map(m => m.media_url_https)\n      .filter(url => typeof url === 'string')\n      .slice(0, 2); // Limit to first 2\n\n    return {\n      json: {\n        tweetId: tweet.id,\n        url: tweet.url,\n        content: tweet.text?.replace(/https?:\\/\\/t\\.co\\/\\S+/g, '').trim() || '',\n        likeCount: tweet.likeCount || 0,\n        retweetCount: tweet.retweetCount || 0,\n        replyCount: tweet.replyCount || 0,\n        quoteCount: tweet.quoteCount || 0,\n        viewCount: tweet.viewCount || 0,\n        createdAt: tweet.createdAt || '',\n        mediaUrl1: mediaUrls[0] || '',\n        mediaUrl2: mediaUrls[1] || ''\n      }\n    };\n  });\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2640,
        760
      ],
      "id": "b174e19b-db7f-4b5a-af28-b1aa3a369086",
      "name": "Extract Info7"
    },
    {
      "parameters": {
        "jsCode": "const tweets = $input.item.json.tweets;\n\nif (tweets && Array.isArray(tweets)) {\n  return tweets.map(tweet => {\n    const media = tweet.extendedEntities?.media || [];\n    const mediaUrls = media\n      .map(m => m.media_url_https)\n      .filter(url => typeof url === 'string')\n      .slice(0, 2); // Limit to first 2\n\n    return {\n      json: {\n        tweetId: tweet.id,\n        url: tweet.url,\n        content: tweet.text?.replace(/https?:\\/\\/t\\.co\\/\\S+/g, '').trim() || '',\n        likeCount: tweet.likeCount || 0,\n        retweetCount: tweet.retweetCount || 0,\n        replyCount: tweet.replyCount || 0,\n        quoteCount: tweet.quoteCount || 0,\n        viewCount: tweet.viewCount || 0,\n        createdAt: tweet.createdAt || '',\n        mediaUrl1: mediaUrls[0] || '',\n        mediaUrl2: mediaUrls[1] || ''\n      }\n    };\n  });\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1880,
        780
      ],
      "id": "86e5dd2d-0e9b-4a27-802e-37081480a9ad",
      "name": "Extract Info8"
    },
    {
      "parameters": {
        "jsCode": "// This will cause the node to output no data\nreturn [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2260,
        780
      ],
      "id": "378f0419-51c1-46a3-8159-9bd83d9e488c",
      "name": "Destroy Input16",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const tweets = $input.item.json.tweets;\n\nif (tweets && Array.isArray(tweets)) {\n  return tweets.map(tweet => {\n    const media = tweet.extendedEntities?.media || [];\n    const mediaUrls = media\n      .map(m => m.media_url_https)\n      .filter(url => typeof url === 'string')\n      .slice(0, 2); // Limit to first 2\n\n    return {\n      json: {\n        tweetId: tweet.id,\n        url: tweet.url,\n        content: tweet.text?.replace(/https?:\\/\\/t\\.co\\/\\S+/g, '').trim() || '',\n        likeCount: tweet.likeCount || 0,\n        retweetCount: tweet.retweetCount || 0,\n        replyCount: tweet.replyCount || 0,\n        quoteCount: tweet.quoteCount || 0,\n        viewCount: tweet.viewCount || 0,\n        createdAt: tweet.createdAt || '',\n        mediaUrl1: mediaUrls[0] || '',\n        mediaUrl2: mediaUrls[1] || ''\n      }\n    };\n  });\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1180,
        760
      ],
      "id": "cc25c17e-8f11-4efb-9a87-08b758a97453",
      "name": "Extract Info9"
    },
    {
      "parameters": {
        "jsCode": "const tweets = $input.item.json.tweets;\n\nif (tweets && Array.isArray(tweets)) {\n  return tweets.map(tweet => {\n    const media = tweet.extendedEntities?.media || [];\n    const mediaUrls = media\n      .map(m => m.media_url_https)\n      .filter(url => typeof url === 'string')\n      .slice(0, 2); // Limit to first 2\n\n    return {\n      json: {\n        tweetId: tweet.id,\n        url: tweet.url,\n        content: tweet.text?.replace(/https?:\\/\\/t\\.co\\/\\S+/g, '').trim() || '',\n        likeCount: tweet.likeCount || 0,\n        retweetCount: tweet.retweetCount || 0,\n        replyCount: tweet.replyCount || 0,\n        quoteCount: tweet.quoteCount || 0,\n        viewCount: tweet.viewCount || 0,\n        createdAt: tweet.createdAt || '',\n        mediaUrl1: mediaUrls[0] || '',\n        mediaUrl2: mediaUrls[1] || ''\n      }\n    };\n  });\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -460,
        760
      ],
      "id": "b8ee7e0b-1531-4061-8f1e-c4ffb6dab5ba",
      "name": "Extract Info10"
    },
    {
      "parameters": {
        "jsCode": "// This will cause the node to output no data\nreturn [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1020,
        1100
      ],
      "id": "aaffc57e-862e-4378-a4e4-a76187ddee27",
      "name": "Destroy Input",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE",
          "mode": "list",
          "cachedResultName": "Mega Scraper",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -780,
        1140
      ],
      "id": "b279b340-06bb-41bd-8ad2-7acc89c93a68",
      "name": "Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "IBSllZPSYK4EDII0",
          "name": "Google Sheets account 4"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 0 31 2 *"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        740,
        1160
      ],
      "id": "2572acad-e9c3-4c48-a64d-8b1348d8a4d3",
      "name": "Schedule Trigger1"
    },
    {
      "parameters": {
        "jsCode": "// This will cause the node to output no data\nreturn [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        120,
        1000
      ],
      "id": "603f3a06-29fe-499d-8190-2cbe894ee1de",
      "name": "Destroy Input1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c6885387-4655-4b82-9e45-ad70a1adacc1",
              "name": "chatFact",
              "value": "iron man movie facts",
              "type": "string"
            },
            {
              "id": "01739303-b1b4-4d2f-9496-287499f2b803",
              "name": "factAmount",
              "value": "10",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        660,
        1800
      ],
      "id": "a866e80e-4e93-4433-97aa-c21447d1fc0d",
      "name": "Set Facts"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nconst openaiKey = $env.OPENAI_API_KEY;\nconst chatFact = $json.chatFact;\nconst factAmount = $json.factAmount;\n\nconsole.log(\"üé¨ Generating 25 movie facts...\");\n\nconst messages = [\n  {\n    role: \"user\",\n    content: `\nGenerate a list of ${factAmount} interesting, surprising, incredible, amazing, or little-known ${chatFact}.\nEach fact should be 1‚Äì2 sentences long and include a specific well-known detail, like a name, year, or story. Make sure to put the title of the movie and the year it was released in your movie facts.\nFormat them as a numbered list (1. fact, 2. fact, ..., 25. fact).\nDo NOT use quotes or emojis.\nDo NOT add any introduction or summary before or after the list.\n    `.trim()\n  }\n];\n\ntry {\n  const gptResponse = await axios.post(\n    \"https://api.openai.com/v1/chat/completions\",\n    {\n      model: \"gpt-4o\",\n      messages,\n      temperature: 0.7,\n      max_tokens: 1200\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${openaiKey}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n\n  const fullList = gptResponse.data.choices[0].message.content.trim();\n\n  return [\n    {\n      json: {\n        fullList\n      }\n    }\n  ];\n} catch (error) {\n  console.error(\"‚ùå Error generating movie facts:\", error.message);\n  return [\n    {\n      json: {\n        error: true,\n        errorMessage: error.message\n      }\n    }\n  ];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        860,
        1800
      ],
      "id": "44ad4d15-88ae-4b00-b7a9-70c41cc06159",
      "name": "Generate Facts"
    },
    {
      "parameters": {
        "jsCode": "const rawList = $json.fullList;\n\nif (!rawList || typeof rawList !== 'string') {\n  throw new Error(\"Input is not a valid string of facts.\");\n}\n\n// This regex splits based on numbered list format like \"1. \", \"2. \", ..., \"25. \"\nconst factRegex = /\\d+\\.\\s+/g;\nconst splitFacts = rawList.split(factRegex).filter(fact => fact.trim() !== \"\");\n\n// Return each fact as a separate item\nreturn splitFacts.map((fact, index) => ({\n  json: {\n    index: index + 1,\n    fact: fact.trim()\n  }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1080,
        1800
      ],
      "id": "1954339b-f681-49e1-b040-ae7b8e6d00c7",
      "name": "Extract Each Fact"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nconst openaiKey = $env.OPENAI_API_KEY;\nconst fact = $json.fact;\n\nconsole.log(`üé• Responding to movie fact: \"${fact}\"`);\n\nconst messages = [\n  {\n    role: \"user\",\n    content: `\nLook at this post and reply as if you're a real person scrolling social media, not a bot. Your tone should be chill, observant, and down-to-earth, like someone casually commenting something thoughtful, lighthearted, or insightful without trying too hard.\nDon't repeat the fact. No emojis. No hashtags. No em or en dashes. Keep it under 200 characters.\n\nMovie Fact: ${fact}\n    `.trim()\n  }\n];\n\ntry {\n  const gptResponse = await axios.post(\n    \"https://api.openai.com/v1/chat/completions\",\n    {\n      model: \"gpt-4o\",\n      messages,\n      temperature: 0.8,\n      max_tokens: 100\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${openaiKey}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n\n  const response = gptResponse.data.choices[0].message.content.trim();\n\n  return [\n    {\n      json: {\n        fact,\n        response\n      }\n    }\n  ];\n} catch (error) {\n  console.error(\"‚ùå Error generating response to fact:\", error.message);\n  return [\n    {\n      json: {\n        fact,\n        response: \"Error: GPT failed to generate a response.\",\n        error: true,\n        errorMessage: error.message\n      }\n    }\n  ];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1500,
        1800
      ],
      "id": "101abf40-cd48-48c7-9570-9b4ab3b41485",
      "name": "Respond to Fact"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nconst templatedKey = $env.TEMPLATED_API_KEY;\nconst fact = $json.fact;\nconst responseText = $json.response;\nconst templateId = '103e45ef-09a2-4d59-9fc2-ef876e91c556' \n\nconsole.log(\"üñºÔ∏è Sending fact and response to Templated.io...\");\n\nasync function waitForTemplateImage(id, apiKey) {\n  const maxAttempts = 10;\n  const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    console.log(`‚åõ Waiting for image (attempt ${attempt})...`);\n    const statusRes = await axios.get(`https://api.templated.io/v1/render/${id}`, {\n      headers: { Authorization: `Bearer ${apiKey}` }\n    });\n\n    if (statusRes.data.url) {\n      return statusRes.data.url;\n    }\n\n    await delay(2000); // wait 2 seconds\n  }\n\n  throw new Error(\"‚ùå Timeout: Template image rendering took too long.\");\n}\n\ntry {\n  const renderResponse = await axios.post(\n    \"https://api.templated.io/v1/render\",\n    {\n      template: templateId,\n      layers: {\n        post: {\n          text: fact\n        },\n        reply: {\n          text: responseText\n        }\n      },\n      format: \"png\",\n      async: false\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${templatedKey}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n\n  let finalImageUrl;\n\n  if (renderResponse.data.url) {\n    finalImageUrl = renderResponse.data.url;\n    console.log(`‚úÖ Image ready instantly: ${finalImageUrl}`);\n  } else if (renderResponse.data.id) {\n    finalImageUrl = await waitForTemplateImage(renderResponse.data.id, templatedKey);\n    console.log(`‚úÖ Image ready after wait: ${finalImageUrl}`);\n  } else {\n    throw new Error(\"No image URL or template ID returned.\");\n  }\n\n  return [\n    {\n      json: {\n        fact,\n        response: responseText,\n        generatedImageUrl: finalImageUrl,\n        templateId: renderResponse.data.id || 'instant',\n        success: true\n      }\n    }\n  ];\n\n} catch (error) {\n  console.error(\"‚ùå Error generating Templated.io image:\", error.message);\n\n  return [\n    {\n      json: {\n        fact,\n        response: responseText,\n        generatedImageUrl: null,\n        error: true,\n        errorMessage: error.message\n      }\n    }\n  ];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1680,
        1800
      ],
      "id": "0ed7d188-08dc-493c-8320-4625b1d6ca81",
      "name": "Generate Templated Image"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nconst openaiKey = $env.OPENAI_API_KEY;\nconst fact = $json.fact;\n\nconsole.log(`üéØ Generating YouTube search term for fact: \"${fact}\"`);\n\nconst messages = [\n  {\n    role: \"user\",\n    content: `\nYou are helping someone find relevant clips on YouTube.\n\nGiven the fact below, generate a short and specific YouTube search query that would likely return the clip of the moment being described. Avoid extra commentary, no punctuation unless necessary. Prioritize character names, scene names, movie title, or behind-the-scenes keywords. \n\nMovie Fact:\n${fact}\n    `.trim()\n  }\n];\n\ntry {\n  const gptResponse = await axios.post(\n    \"https://api.openai.com/v1/chat/completions\",\n    {\n      model: \"gpt-4o\",\n      messages,\n      temperature: 0.5,\n      max_tokens: 50\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${openaiKey}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n\n  let searchTerm = gptResponse.data.choices[0].message.content.trim();\n\n  // Clean up accidental punctuation or quotes\n  searchTerm = searchTerm.replace(/^[\"']|[\"']$/g, \"\").trim();\n\n  return [\n    {\n      json: {\n        fact,\n        searchTerm\n      }\n    }\n  ];\n} catch (error) {\n  console.error(\"‚ùå Error generating search term:\", error.message);\n  return [\n    {\n      json: {\n        fact,\n        searchTerm: null,\n        error: true,\n        errorMessage: error.message\n      }\n    }\n  ];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1860,
        1800
      ],
      "id": "04c37d48-0d21-4d7b-90c4-b9b80c13b10a",
      "name": "Get Search Term"
    },
    {
      "parameters": {
        "command": "=yt-dlp -f \"bv[ext=mp4][vcodec^=avc1]+ba[ext=m4a][acodec^=mp4a]/best[ext=mp4]\" \\\n--merge-output-format mp4 \\\n-o \"/Users/matt/Desktop/Movie_Clips/%(title)s.%(ext)s\" \"ytsearch1:{{ $json.searchTerm }}\"\n"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2060,
        1800
      ],
      "id": "471bf21b-4be8-47f7-b940-1065fc175d6e",
      "name": "Download Clip"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1280,
        1800
      ],
      "id": "0bec87ae-b60c-495c-809c-5c2762a14835",
      "name": "Loop Over Facts"
    },
    {
      "parameters": {
        "content": "# Scrape Web For Clips",
        "height": 300,
        "width": 1840
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        400,
        1720
      ],
      "id": "e815761c-5b7c-4545-8890-5a775c70316f",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# Scrape Web For Images",
        "height": 340,
        "width": 1840,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        400,
        1360
      ],
      "id": "3d367660-4ccf-4007-9ac9-8b0f1fb71581",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c6885387-4655-4b82-9e45-ad70a1adacc1",
              "name": "chatFact",
              "value": "interesting celebrity and public figure facts",
              "type": "string"
            },
            {
              "id": "01739303-b1b4-4d2f-9496-287499f2b803",
              "name": "factAmount",
              "value": "25",
              "type": "string"
            },
            {
              "id": "274d59d1-25a2-4749-8a86-f979476a52c3",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        680,
        1460
      ],
      "id": "a74abeb5-6d3e-4536-a84c-cb5d79c63190",
      "name": "Set Facts1"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nconst openaiKey = $env.OPENAI_API_KEY;\nconst chatFact = $json.chatFact;\nconst factAmount = $json.factAmount;\n\nconsole.log(\"üé¨ Generating 25 movie facts...\");\n\nconst messages = [\n  {\n    role: \"user\",\n    content: `\nGenerate a list of ${factAmount} interesting, surprising, incredible, amazing, or little-known  ${chatFact}. \nEach fact should be 1‚Äì2 sentences long and include a specific well-known detail, like a name, year, or story.\nFormat them as a numbered list (1. fact, 2. fact, ..., 25. fact).\nDo NOT use quotes or emojis.\nDo NOT add any introduction or summary before or after the list.\n    `.trim()\n  }\n];\n\ntry {\n  const gptResponse = await axios.post(\n    \"https://api.openai.com/v1/chat/completions\",\n    {\n      model: \"gpt-4o\",\n      messages,\n      temperature: 0.7,\n      max_tokens: 1200\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${openaiKey}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n\n  const fullList = gptResponse.data.choices[0].message.content.trim();\n\n  return [\n    {\n      json: {\n        fullList\n      }\n    }\n  ];\n} catch (error) {\n  console.error(\"‚ùå Error generating movie facts:\", error.message);\n  return [\n    {\n      json: {\n        error: true,\n        errorMessage: error.message\n      }\n    }\n  ];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        860,
        1460
      ],
      "id": "ad3276de-637f-444d-a636-3eb93a8d527c",
      "name": "Generate Facts1"
    },
    {
      "parameters": {
        "jsCode": "const rawList = $json.fullList;\n\nif (!rawList || typeof rawList !== 'string') {\n  throw new Error(\"Input is not a valid string of facts.\");\n}\n\n// This regex splits based on numbered list format like \"1. \", \"2. \", ..., \"25. \"\nconst factRegex = /\\d+\\.\\s+/g;\nconst splitFacts = rawList.split(factRegex).filter(fact => fact.trim() !== \"\");\n\n// Return each fact as a separate item\nreturn splitFacts.map((fact, index) => ({\n  json: {\n    index: index + 1,\n    fact: fact.trim()\n  }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1080,
        1460
      ],
      "id": "c89ceae6-cd2b-4c1b-baeb-94a551ec0ca0",
      "name": "Extract Each Fact1"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nconst openaiKey = $env.OPENAI_API_KEY;\nconst fact = $json.fact;\n\nconsole.log(`üé• Responding to movie fact: \"${fact}\"`);\n\nconst messages = [\n  {\n    role: \"user\",\n    content: `\nLook at this post and reply as if you're a real person scrolling social media, not a bot. Your tone should be chill, observant, and down-to-earth, like someone casually commenting something thoughtful, lighthearted, or insightful without trying too hard.\nDon't repeat the fact. No emojis. No hashtags. No em on en dashes. Keep it under 200 characters.\n\nInteresting Fact: ${fact}\n    `.trim()\n  }\n];\n\ntry {\n  const gptResponse = await axios.post(\n    \"https://api.openai.com/v1/chat/completions\",\n    {\n      model: \"gpt-4o\",\n      messages,\n      temperature: 0.8,\n      max_tokens: 100\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${openaiKey}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n\n  const response = gptResponse.data.choices[0].message.content.trim();\n\n  return [\n    {\n      json: {\n        fact,\n        response\n      }\n    }\n  ];\n} catch (error) {\n  console.error(\"‚ùå Error generating response to fact:\", error.message);\n  return [\n    {\n      json: {\n        fact,\n        response: \"Error: GPT failed to generate a response.\",\n        error: true,\n        errorMessage: error.message\n      }\n    }\n  ];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        1500
      ],
      "id": "5c0fd149-a550-45d3-aee4-481ddbea7bb1",
      "name": "Respond to Fact1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1320,
        1460
      ],
      "id": "07b2b447-9107-45fc-90f8-91e99aec4a0c",
      "name": "Loop Over Facts1"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nconst fact = $json.fact;\nconst responseText = $json.response;\nconst templateId = '49ccc7c0-9d0d-456e-9163-fa72b33d33c0'; // 2-image template\nconst openaiKey = $env.OPENAI_API_KEY;\nconst googleSearchKey = $env.GOOGLE_API_KEY;\nconst googleSearchId = $env.GOOGLE_SEARCH_ID;\nconst templatedKey = $env.TEMPLATED_API_KEY;\n\nfunction delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function generateSearchTerm(fact) {\n  const prompt = `Based on the following fun fact, suggest a short and visual search term someone could use to find a relevant image: \"${fact}\"`;\n\n  const completion = await axios.post('https://api.openai.com/v1/chat/completions', {\n    model: 'gpt-4',\n    messages: [{ role: 'user', content: prompt }],\n    max_tokens: 20\n  }, {\n    headers: {\n      'Authorization': `Bearer ${openaiKey}`,\n      'Content-Type': 'application/json'\n    }\n  });\n\n  const suggestion = completion.data.choices[0].message.content.trim();\n  console.log(\"üîç Search term from GPT:\", suggestion);\n  return suggestion;\n}\n\nasync function getGoogleImages(searchTerm) {\n  const googleUrl = `https://www.googleapis.com/customsearch/v1?q=${encodeURIComponent(searchTerm)}&searchType=image&num=2&key=${googleSearchKey}&cx=${googleSearchId}&safe=active`;\n\n  const res = await axios.get(googleUrl);\n  const items = res.data.items || [];\n\n  const imageUrl1 = items[0]?.link;\n  const imageUrl2 = items[1]?.link;\n\n  if (!imageUrl1 || !imageUrl2) throw new Error(\"Not enough image results from Google.\");\n\n  console.log(\"üñºÔ∏è Image 1 URL:\", imageUrl1);\n  console.log(\"üñºÔ∏è Image 2 URL:\", imageUrl2);\n\n  return { imageUrl1, imageUrl2 };\n}\n\nasync function waitForTemplateImage(id, apiKey) {\n  const maxAttempts = 10;\n  for (let i = 1; i <= maxAttempts; i++) {\n    console.log(`‚åõ Waiting for Templated.io image (attempt ${i})...`);\n    const status = await axios.get(`https://api.templated.io/v1/render/${id}`, {\n      headers: { Authorization: `Bearer ${apiKey}` }\n    });\n\n    if (status.data.url) return status.data.url;\n    await delay(2000);\n  }\n  throw new Error(\"Timed out waiting for Templated.io image.\");\n}\n\ntry {\n  const searchTerm = await generateSearchTerm(fact);\n  const { imageUrl1, imageUrl2 } = await getGoogleImages(searchTerm);\n\n  const renderResponse = await axios.post(\n    \"https://api.templated.io/v1/render\",\n    {\n      template: templateId,\n      layers: {\n        post: { text: fact },\n        reply: { text: responseText },\n        image: { image_url: imageUrl1 },         // First result\n        \"image-copy\": { image_url: imageUrl2 }   // Second result\n      },\n      format: \"png\",\n      async: false\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${templatedKey}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n\n  let finalImageUrl;\n\n  if (renderResponse.data.url) {\n    finalImageUrl = renderResponse.data.url;\n    console.log(\"‚úÖ Image rendered instantly:\", finalImageUrl);\n  } else if (renderResponse.data.id) {\n    finalImageUrl = await waitForTemplateImage(renderResponse.data.id, templatedKey);\n    console.log(\"‚úÖ Image ready after polling:\", finalImageUrl);\n  } else {\n    throw new Error(\"Templated.io did not return a valid image.\");\n  }\n\n  return [\n    {\n      json: {\n        fact,\n        response: responseText,\n        searchTerm,\n        imageUsed1: imageUrl1,\n        imageUsed2: imageUrl2,\n        generatedImageUrl: finalImageUrl,\n        success: true\n      }\n    }\n  ];\n\n} catch (err) {\n  console.error(\"‚ùå Error:\", err.message);\n\n  return [\n    {\n      json: {\n        fact,\n        response: responseText,\n        generatedImageUrl: null,\n        error: true,\n        errorMessage: err.message\n      }\n    }\n  ];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1720,
        1500
      ],
      "id": "f0387ca7-f458-44ff-8ff0-c3aa682ecd10",
      "name": "Templated 2 Images"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nconst fact = $json.fact;\nconst responseText = $json.response;\nconst templateId = '103e45ef-09a2-4d59-9fc2-ef876e91c556';\nconst openaiKey = $env.OPENAI_API_KEY;\nconst googleSearchKey = $env.GOOGLE_API_KEY;\nconst googleSearchId = $env.GOOGLE_SEARCH_ID;\nconst templatedKey = $env.TEMPLATED_API_KEY;\n\nfunction delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function generateSearchTerm(fact) {\n  const prompt = `Based on the following fun fact, suggest a short and visual search term someone could use to find a relevant image: \"${fact}\"`;\n\n  const completion = await axios.post('https://api.openai.com/v1/chat/completions', {\n    model: 'gpt-4',\n    messages: [{ role: 'user', content: prompt }],\n    max_tokens: 20\n  }, {\n    headers: {\n      'Authorization': `Bearer ${openaiKey}`,\n      'Content-Type': 'application/json'\n    }\n  });\n\n  const suggestion = completion.data.choices[0].message.content.trim();\n  console.log(\"üîç Search term from GPT:\", suggestion);\n  return suggestion;\n}\n\nasync function getGoogleImage(searchTerm) {\n  const googleUrl = `https://www.googleapis.com/customsearch/v1?q=${encodeURIComponent(searchTerm)}&searchType=image&num=1&key=${googleSearchKey}&cx=${googleSearchId}&safe=active`;\n\n  const res = await axios.get(googleUrl);\n\n  const imageUrl = res.data.items?.[0]?.link;\n  if (!imageUrl) throw new Error(\"No image found from Google Custom Search.\");\n\n  console.log(\"üñºÔ∏è Google image URL:\", imageUrl);\n  return imageUrl;\n}\n\nasync function waitForTemplateImage(id, apiKey) {\n  const maxAttempts = 10;\n  for (let i = 1; i <= maxAttempts; i++) {\n    console.log(`‚åõ Waiting for Templated.io image (attempt ${i})...`);\n    const status = await axios.get(`https://api.templated.io/v1/render/${id}`, {\n      headers: { Authorization: `Bearer ${apiKey}` }\n    });\n\n    if (status.data.url) return status.data.url;\n    await delay(2000);\n  }\n  throw new Error(\"Timed out waiting for Templated.io image.\");\n}\n\ntry {\n  const searchTerm = await generateSearchTerm(fact);\n  const imageUrl = await getGoogleImage(searchTerm);\n\n  const renderResponse = await axios.post(\n    \"https://api.templated.io/v1/render\",\n    {\n      template: templateId,\n      layers: {\n        post: { text: fact },\n        reply: { text: responseText },\n        image: { image_url: imageUrl }\n      },\n      format: \"png\",\n      async: false\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${templatedKey}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n\n  let finalImageUrl;\n\n  if (renderResponse.data.url) {\n    finalImageUrl = renderResponse.data.url;\n    console.log(\"‚úÖ Image rendered instantly:\", finalImageUrl);\n  } else if (renderResponse.data.id) {\n    finalImageUrl = await waitForTemplateImage(renderResponse.data.id, templatedKey);\n    console.log(\"‚úÖ Image ready after polling:\", finalImageUrl);\n  } else {\n    throw new Error(\"Templated.io did not return a valid image.\");\n  }\n\n  return [\n    {\n      json: {\n        fact,\n        response: responseText,\n        searchTerm,\n        imageUsed: imageUrl,\n        generatedImageUrl: finalImageUrl,\n        success: true\n      }\n    }\n  ];\n\n} catch (err) {\n  console.error(\"‚ùå Error:\", err.message);\n\n  return [\n    {\n      json: {\n        fact,\n        response: responseText,\n        generatedImageUrl: null,\n        error: true,\n        errorMessage: err.message\n      }\n    }\n  ];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1900,
        1500
      ],
      "id": "6bef5646-dd0b-4520-8733-f8aab777b03a",
      "name": "Templated One Image",
      "disabled": true
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 0 31 2 *"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        480,
        1460
      ],
      "id": "0dc56cdf-f95a-4f35-b2ba-c74ff0282d41",
      "name": "Schedule Trigger3"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 0 31 2 *"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        460,
        1800
      ],
      "id": "43cf508b-318e-441e-b7f7-75d67def7761",
      "name": "Schedule Trigger4"
    },
    {
      "parameters": {
        "content": "# Twitter Video\n",
        "height": 800,
        "width": 3940,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3560,
        1360
      ],
      "id": "95250c99-7bff-4c37-a4ac-d9d07cae04a1",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b1349616-89c4-4a9a-b130-d1773fde5f21",
              "name": "url",
              "value": "={{ $('Loop Over Items').item.json.url }}\"",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1200,
        1440
      ],
      "id": "1db893fc-5ca6-47ec-a614-0ba98fb9fbc9",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweet/advanced_search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "from:DudespostingWs filter:videos min_faves:3000"
            },
            {
              "name": "queryType",
              "value": "Latest"
            },
            {
              "name": "cursor",
              "value": "={{ $('Counter').item.json.cursor }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3460,
        1440
      ],
      "id": "a3a5d830-56c4-4eb8-90de-1b99202ae451",
      "name": "Get Tweets6",
      "credentials": {
        "httpHeaderAuth": {
          "id": "wfaQplzpG1UZAAtm",
          "name": "TwitterAPI"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const tweets = $input.item.json.tweets;\n\nif (tweets && Array.isArray(tweets)) {\n  return tweets.map(tweet => ({\n    json: {\n      tweetId: tweet.id,\n      url: tweet.url,\n      content: tweet.text?.replace(/https?:\\/\\/t\\.co\\/\\S+/g, '').trim() || '',\n      likeCount: tweet.likeCount || 0,\n      retweetCount: tweet.retweetCount || 0,\n      replyCount: tweet.replyCount || 0,\n      quoteCount: tweet.quoteCount || 0,\n      viewCount: tweet.viewCount || 0,\n      createdAt: tweet.createdAt || '',\n      mediaURL: $input.first().json.tweets[0].extendedEntities.media[0].media_url_https || ''\n    }\n  }));\n} \n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3260,
        1440
      ],
      "id": "8d59e07f-32df-4dea-9dfc-6f8fbc6b86c9",
      "name": "Extract Info"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\nconst postData = $json;\nconst mediaURL = postData.mediaURL; // Extract mediaURL from the same JSON object\nconst openaiKey = $env.OPENAI_API_KEY;\n\nif (postData.error) {\n  console.log(\"‚è≠Ô∏è Skipping GPT generation due to previous error\");\n  return [\n    {\n      json: {\n        reply: \"Error: Could not generate reply\",\n        post: \"Error: Could not generate post description\",\n        error: true,\n        originalError: postData.errorMessage\n      }\n    }\n  ];\n}\n\nconsole.log(`ü§ñ Generating GPT reply and post description for: \"${postData.content}\"`);\nif (mediaURL && mediaURL.trim() !== '') {\n  console.log(`üì∏ Media URL provided: ${mediaURL}`);\n} else {\n  console.log(`üìù No media URL provided, using text-only mode`);\n}\n\n// Helper function to create content with optional image\nfunction createContentWithImage(textPrompt, includeImage = true) {\n  const content = [\n    {\n      type: \"text\",\n      text: textPrompt\n    }\n  ];\n  \n  // Add image if mediaURL is provided and includeImage is true\n  if (includeImage && mediaURL && mediaURL.trim() !== '') {\n    // Validate that it's a proper URL\n    try {\n      new URL(mediaURL);\n      content.push({\n        type: \"image_url\",\n        image_url: {\n          url: mediaURL,\n          detail: \"auto\" // Changed from \"high\" to \"auto\" for better compatibility\n        }\n      });\n      console.log(`üì∏ Including image in analysis: ${mediaURL}`);\n    } catch (urlError) {\n      console.log(`‚ö†Ô∏è Invalid mediaURL, proceeding without image: ${mediaURL}`);\n    }\n  } else {\n    console.log(`üìù No valid mediaURL provided, using text-only analysis`);\n  }\n  \n  return content;\n}\n\n// Generate reply with image context\nconst replyMessages = [\n  {\n    role: \"user\",\n    content: createContentWithImage(\n      `Look at this post and the image/video frame, then reply as if you're a real person scrolling social media, not a bot. Your tone should be chill, observant, and down-to-earth, like someone casually commenting something thoughtful, lighthearted, or insightful without trying too hard. Use both the text and visual context to craft your response. Avoid summarizing the post or restating what's already there. Instead, add something new: a reaction, reflection, commentary, or clever detail someone might miss from either the text or image. Never be cringey, sarcastic, overly edgy, or try to be too smart. Just sound like a normal person with emotional awareness and some personality. Don't write in a fake overly positive tone, be down to earth. No gamer or chronically online language (examples include: boss, level, mode, ah yes, plot twist, etc.). No emojis. Keep it under 160 characters. No quotes, dashes, or robotic formatting.\nPost: \"${postData.content}\"`,\n      true\n    )\n  }\n];\n\n// Generate post description with image context\nconst postMessages = [\n  {\n    role: \"user\",\n    content: createContentWithImage(\n      `Based on this video caption and the first frame image, write a brief description that explains what's happening in the video. Include context such as the year, location, or significance if necessary. Use past tense.  Do not mention the word \"video\", or say anything like \"in this video\". Make it factual, like an interesting fact about what viewers are watching. No emojis. No em or en dashes. Max 200 characters.\nPost content: \"${postData.content}\"`,\n      true\n    )\n  }\n];\n\ntry {\n  // Make both API calls simultaneously\n  const [replyResponse, postResponse] = await Promise.all([\n    axios.post(\n      \"https://api.openai.com/v1/chat/completions\",\n      {\n        model: \"gpt-4o\",\n        messages: replyMessages,\n        temperature: 0.8,\n        max_tokens: 150\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${openaiKey}`,\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    ),\n    axios.post(\n      \"https://api.openai.com/v1/chat/completions\",\n      {\n        model: \"gpt-4o\",\n        messages: postMessages,\n        temperature: 0.7,\n        max_tokens: 100\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${openaiKey}`,\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    )\n  ]);\n\n  // Clean up reply\n  let reply = replyResponse.data.choices[0].message.content.trim();\n  if ((reply.startsWith('\"') && reply.endsWith('\"')) ||\n      (reply.startsWith(\"'\") && reply.endsWith(\"'\"))) {\n    reply = reply.slice(1, -1).trim();\n  }\n\n  // Clean up post description\n  let post = postResponse.data.choices[0].message.content.trim();\n  if ((post.startsWith('\"') && post.endsWith('\"')) ||\n      (post.startsWith(\"'\") && post.endsWith(\"'\"))) {\n    post = post.slice(1, -1).trim();\n  }\n\n  console.log(`‚úÖ Generated reply: \"${reply}\"`);\n  console.log(`‚úÖ Generated post: \"${post}\"`);\n  \n  return [\n    {\n      json: {\n        reply,\n        post,\n        model: \"gpt-4o\",\n        usedImageAnalysis: !!mediaURL\n      }\n    }\n  ];\n\n} catch (error) {\n  console.error(`‚ùå Error generating GPT responses:`, error.message);\n  if (error.response) {\n    console.error(`üìã Response status: ${error.response.status}`);\n    console.error(`üìã Response data:`, JSON.stringify(error.response.data, null, 2));\n  }\n  \n  // Fallback: try without image if the error might be image-related\n  if (mediaURL && mediaURL.trim() !== '' && (\n    error.response?.status === 400 || \n    error.message.includes('image') || \n    error.message.includes('vision') ||\n    error.message.includes('multimodal')\n  )) {\n    console.log(`üîÑ Retrying without image analysis due to potential image-related error...`);\n    try {\n      const fallbackReplyMessages = [\n        {\n          role: \"user\",\n          content: `Look at this post and reply as if you're a real person scrolling social media, not a bot. Your tone should be chill, observant, and down-to-earth, like someone casually commenting something thoughtful, lighthearted, or insightful without trying too hard. Avoid summarizing the post or restating what's already there. Instead, add something new: a reaction, reflection, commentary, or clever detail someone might miss. Never be cringey, sarcastic, overly edgy, or try to be too smart. Just sound like a normal person with emotional awareness and some personality. Don't write in a fake overly positive tone, be down to earth. No gamer or chronically online language (examples include: boss, level, mode, ah yes, plot twist, etc.). No emojis. Keep it under 160 characters. No quotes, dashes, or robotic formatting.\nPost: \"${postData.content}\"`\n        }\n      ];\n\n      const fallbackPostMessages = [\n        {\n          role: \"user\",\n          content: `Based on this video caption, write a brief description that explains what's happening in the video. Do not mention anything like \"in this video\". Make it factual, like an interesting fact about what viewers are watching. No emojis. No em or en dashes. Max 200 characters.\nTweet content: \"${postData.content}\"`\n        }\n      ];\n\n      const [fallbackReplyResponse, fallbackPostResponse] = await Promise.all([\n        axios.post(\n          \"https://api.openai.com/v1/chat/completions\",\n          {\n            model: \"gpt-4o\",\n            messages: fallbackReplyMessages,\n            temperature: 0.8,\n            max_tokens: 150\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${openaiKey}`,\n              \"Content-Type\": \"application/json\"\n            }\n          }\n        ),\n        axios.post(\n          \"https://api.openai.com/v1/chat/completions\",\n          {\n            model: \"gpt-4o\",\n            messages: fallbackPostMessages,\n            temperature: 0.7,\n            max_tokens: 100\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${openaiKey}`,\n              \"Content-Type\": \"application/json\"\n            }\n          }\n        )\n      ]);\n\n      let fallbackReply = fallbackReplyResponse.data.choices[0].message.content.trim();\n      let fallbackPost = fallbackPostResponse.data.choices[0].message.content.trim();\n\n      // Clean up responses\n      if ((fallbackReply.startsWith('\"') && fallbackReply.endsWith('\"')) ||\n          (fallbackReply.startsWith(\"'\") && fallbackReply.endsWith(\"'\"))) {\n        fallbackReply = fallbackReply.slice(1, -1).trim();\n      }\n      if ((fallbackPost.startsWith('\"') && fallbackPost.endsWith('\"')) ||\n          (fallbackPost.startsWith(\"'\") && fallbackPost.endsWith(\"'\"))) {\n        fallbackPost = fallbackPost.slice(1, -1).trim();\n      }\n\n      console.log(`‚úÖ Generated fallback reply: \"${fallbackReply}\"`);\n      console.log(`‚úÖ Generated fallback post: \"${fallbackPost}\"`);\n\n      return [\n        {\n          json: {\n            reply: fallbackReply,\n            post: fallbackPost,\n            model: \"gpt-4o\",\n            usedImageAnalysis: false,\n            fallbackUsed: true\n          }\n        }\n      ];\n    } catch (fallbackError) {\n      console.error(`‚ùå Fallback also failed:`, fallbackError.message);\n      return [\n        {\n          json: {\n            reply: \"sorry, my brain broke trying to think of a reply ü§ñüí•\",\n            post: \"Error generating post description\",\n            error: true,\n            errorMessage: fallbackError.message\n          }\n        }\n      ];\n    }\n  }\n\n  return [\n    {\n      json: {\n        reply: \"sorry, my brain broke trying to think of a reply ü§ñüí•\",\n        post: \"Error generating post description\",\n        error: true,\n        errorMessage: error.message\n      }\n    }\n  ];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2000,
        1440
      ],
      "id": "de6f9d1f-c20c-4a9e-b588-a6e1cee6eec4",
      "name": "GPT_Video_Reply"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\nconst postData = $items('GPT_Video_Reply')[0].json;  // Updated to reference your previous node\nconst gptData = $items('GPT_Video_Reply')[0].json;  // Updated to reference the dual response node\nconst templatedKey = $env.TEMPLATED_API_KEY;\n\nconsole.log(`üñºÔ∏è Generating Templated.io image with reply and post description...`);\n\nasync function waitForTemplateImage(id, apiKey) {\n  const maxAttempts = 10;\n  const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n  \n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    console.log(`‚åõ Waiting for image (attempt ${attempt})...`);\n    const statusRes = await axios.get(`https://api.templated.io/v1/render/${id}`, {\n      headers: { Authorization: `Bearer ${apiKey}` }\n    });\n    \n    if (statusRes.data.url) {\n      return statusRes.data.url;\n    }\n    await delay(2000); // wait 2 seconds\n  }\n  throw new Error(\"‚ùå Timeout: Template image rendering took too long.\");\n}\n\ntry {\n  // Use only the single image template\n  const selectedTemplate = \"52c3d8c3-9274-4671-934f-b0a9030dbb1d\";\n  \n  const layers = {\n    post: {\n      text: gptData.post,  // Using the new 'post' field for Twitter video description\n      color_2: \"#FFFF00\"\n    },\n    reply: {\n      text: gptData.reply  // Using the 'reply' field from dual response\n    },\n    image: {\n      image_url: postData.imageUrl\n    }\n  };\n\n  console.log(`üìù Using post description: \"${gptData.post}\"`);\n  console.log(`üí¨ Using reply: \"${gptData.reply}\"`);\n\n  const response = await axios.post(\n    \"https://api.templated.io/v1/render\",\n    {\n      template: selectedTemplate,\n      layers,\n      format: \"png\",\n      async: false\n    },\n    {\n      headers: {\n        Authorization: `Bearer ${templatedKey}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n\n  let finalImageUrl;\n  if (response.data.url) {\n    finalImageUrl = response.data.url;\n    console.log(`‚úÖ Templated image ready instantly: ${finalImageUrl}`);\n  } else if (response.data.id) {\n    finalImageUrl = await waitForTemplateImage(response.data.id, templatedKey);\n    console.log(`‚úÖ Templated image ready after wait: ${finalImageUrl}`);\n  } else {\n    throw new Error(\"No image URL or template ID returned.\");\n  }\n\n  return [\n    {\n      json: {\n        generatedImageUrl: finalImageUrl,\n        templateId: response.data.id || 'instant',\n        postDescription: gptData.post,\n        reply: gptData.reply,\n        usedImage: !!postData.imageUrl && !postData.imageUrl.includes('placeholder'),\n        success: true\n      }\n    }\n  ];\n\n} catch (error) {\n  console.error(\"‚ùå Error during template image generation:\", error.message);\n  return [\n    {\n      json: {\n        generatedImageUrl: null,\n        postDescription: gptData?.post || null,\n        reply: gptData?.reply || null,\n        error: true,\n        errorMessage: error.message\n      }\n    }\n  ];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1800,
        1440
      ],
      "id": "e4eae7f3-9e54-439c-af2c-3e052787c1f3",
      "name": "Generate Template4"
    },
    {
      "parameters": {
        "options": {
          "reset": "={{ $prevNode.name === 'Google Sheets11'}}"
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -2220,
        1440
      ],
      "id": "3ee22465-7d72-4635-b879-8cd65e5dfc10",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "url": "={{$json[\"generatedImageUrl\"]}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1600,
        1440
      ],
      "id": "fd3b147a-2db8-4217-af41-15c270cf5cb3",
      "name": "Download Templated Image",
      "retryOnFail": true,
      "maxTries": 5
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/Users/matt/Desktop/X2/{{ $binary.data.fileName }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -1400,
        1440
      ],
      "id": "0791b81c-da4d-4340-b9c5-55c1f2a3196f",
      "name": "Read/Write Files from Disk3"
    },
    {
      "parameters": {
        "command": "=yt-dlp -f \"bv[ext=mp4][vcodec^=avc1]+ba[ext=m4a][acodec^=mp4a]/best[ext=mp4]\" --merge-output-format mp4 -o \"/Users/matt/Desktop/X/{{ $('Read/Write Files from Disk3').item.json.templateId }}.%(ext)s\" {{$json[\"url\"].replace(/\\\"$/,'')}}"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -1020,
        1440
      ],
      "id": "8a21c888-ca21-419a-b082-9e8e328df76e",
      "name": "Download Twitter Video",
      "retryOnFail": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=cd /Users/matt/Desktop/AME_Output2 \n\nfor file in *.{mp4,mov,avi,mkv,webm}; do\n  [ -e \"$file\" ] || continue  # skip if no matching files\n  output=\"/Users/matt/Desktop/X/${file%.*}.mp4\"\n  ffmpeg -i \"$file\" -vf \"scale=w=1920:h=1220:force_original_aspect_ratio=increase,crop=1920:1220\" \"$output\"\ndone"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -520,
        1440
      ],
      "id": "71c5e26a-1e54-4937-a696-af06e67055fe",
      "name": "Scale Video",
      "retryOnFail": false,
      "maxTries": 5,
      "waitBetweenTries": 5000,
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "=ffmpeg \\\n -i /Users/matt/Desktop/Assets/background.mp4 \\\n -i {{ $('Read/Write Files from Disk3').item.json.fileName }} \\\n -i /Users/matt/Desktop/X/{{ $('Read/Write Files from Disk1').item.json.fileName }} \\\n -filter_complex \"\\\n[1:v]scale=iw:ih[img]; \\\n[2:v]scale=iw*0.475:ih*0.475[vid]; \\\n[0:v][img]overlay=(W-w)/2:(H-h)/2-60[tmp]; \\\n[tmp][vid]overlay=(W-w)/2:(H-h)/2-20:shortest=1[out]\" \\\n-map \"[out]\" -map 2:a? \\\n-c:v libx264 -crf 18 -preset veryfast \\\n-pix_fmt yuv420p \\\n-shortest \\\n/Users/matt/Desktop/Finished/{{ $('Read/Write Files from Disk3').item.json.templateId }}.mp4"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -340,
        1440
      ],
      "id": "898cd734-f33a-4a1a-ad1e-dd1738d4e55f",
      "name": "Execute Command",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5,
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "rm -rf /Users/matt/Desktop/X/*"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -160,
        1440
      ],
      "id": "fbaef0b8-b506-452e-8c54-4a0ac108666e",
      "name": "Execute Command2",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "amount": 20
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -680,
        1440
      ],
      "id": "e555a313-e8b6-41ed-86ff-5922b2e61fc4",
      "name": "Wait",
      "webhookId": "14051ea0-7d83-494c-a891-e848a7e72dfa",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "command": "/opt/homebrew/Cellar/trash/0.9.2/bin/trash /Users/matt/Desktop/AME_Output2/*"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        200,
        1440
      ],
      "id": "0d188675-ad5d-4249-a1ac-8a18566b6c86",
      "name": "Execute Command3",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bc47f40e-0850-4762-9efb-999608a2c096",
              "name": "counter",
              "value": "={{ $json.count }}",
              "type": "number"
            },
            {
              "id": "92034c06-3976-4099-a7a5-28a252204472",
              "name": "cursor",
              "value": "={{ $json.cursor }}",
              "type": "string"
            },
            {
              "id": "1caff9cb-6806-4d6c-97ef-48d055a46ad1",
              "name": "cursor2",
              "value": "={{ $json.cursor2 }}",
              "type": "string"
            },
            {
              "id": "e78db3ad-435c-4162-b02b-a1060b2c00db",
              "name": "cursor3",
              "value": "={{ $json.cursor3 }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2140,
        1760
      ],
      "id": "4222b041-d713-4e33-baf1-e15ff4df49e8",
      "name": "Counter"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b2f9c3c3-32f4-48b4-b72f-76f03c35b750",
              "name": "count",
              "value": 1,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2360,
        1740
      ],
      "id": "09284b14-f0fb-4fd6-95b2-8a511fe61a58",
      "name": "Set Count"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "928894d0-2876-4996-9b1e-3d365b903771",
              "leftValue": "={{ $('Counter').item.json.counter }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1120,
        1740
      ],
      "id": "31eb190f-e354-4c0f-b3c4-4a6ecbd7e402",
      "name": "If"
    },
    {
      "parameters": {
        "content": "# Checking Count\n",
        "height": 292,
        "width": 544
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1220,
        1660
      ],
      "id": "8bc27ac9-6604-44b9-ab0f-1eb144c7e4a9",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a252eb06-03cd-4e3f-84b0-2a46082606ca",
              "name": "counter",
              "value": "={{ $('Counter').item.json.counter }}",
              "type": "number"
            },
            {
              "id": "43222ff8-c354-4afa-b050-7d55fe30c865",
              "name": "cursor",
              "value": "={{ $('Get Tweets6').item.json.next_cursor }}",
              "type": "string"
            },
            {
              "id": "7678ac7e-8338-48dc-bd65-46b8a1101995",
              "name": "cursor2",
              "value": "={{ $('Get Tweets7').item.json.next_cursor }}",
              "type": "string"
            },
            {
              "id": "83246238-213a-410a-9bbf-64235bdf0830",
              "name": "cursor3",
              "value": "={{ $('Get Tweets8').item.json.next_cursor }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1740,
        1740
      ],
      "id": "a49d13bf-d1ba-410f-bc73-c27ce6015cca",
      "name": "Set Increase1"
    },
    {
      "parameters": {
        "jsCode": "// This code should be placed in an n8n Function node\n\n// Get the input items\nconst items = $input.all();\n\n// Process each item in the array\nreturn items.map(item => {\n  // Create a new value for the count field\n  let newCount = 1;\n  \n  // If there's an existing counter value, use it as a base\n  if (item.json && item.json.counter !== undefined) {\n    newCount = item.json.counter + 1;\n  }\n  \n  // Ensure json property exists\n  if (!item.json) {\n    item.json = {};\n  }\n  \n  // Set the value to the new field name \"count\"\n  item.json.count = newCount;\n  \n  // Return the modified item\n  return item;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1580,
        1740
      ],
      "id": "7c3d2930-d3b0-4b99-a25e-1cbedb562293",
      "name": "Increase Count1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5be1f203-28ea-4635-b42d-01f2a5bb367f",
              "name": "count",
              "value": "={{ $json.count }}",
              "type": "string"
            },
            {
              "id": "b68f8c17-c045-4b5b-8f8b-367ec72b72a3",
              "name": "cursor",
              "value": "={{ $('Set Increase1').item.json.cursor }}",
              "type": "string"
            },
            {
              "id": "85ba8760-ece7-4fe7-ad96-3a3df90635c7",
              "name": "cursor2",
              "value": "={{ $('Set Increase1').item.json.cursor2 }}",
              "type": "string"
            },
            {
              "id": "77b6f2d9-578d-45b2-aceb-c19980bcf8ab",
              "name": "cursor3",
              "value": "={{ $('Set Increase1').item.json.cursor3 }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1400,
        1740
      ],
      "id": "b99e758b-b139-462a-9052-e2215fb768ea",
      "name": "Set Count and Cursor1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -1920,
        1740
      ],
      "id": "1ce4cb3b-261b-43d9-b5d7-6fca72834414",
      "name": "Limit1"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 0 31 2 *"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2600,
        1740
      ],
      "id": "5154d96c-2546-49f0-92af-cdf5f6a4d6aa",
      "name": "Schedule Trigger6"
    },
    {
      "parameters": {
        "fileSelector": "/Users/matt/Desktop/X/**/*.mp4",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -840,
        1440
      ],
      "id": "95f6e9d0-37d5-4448-aa44-4ad1875e91be",
      "name": "Read/Write Files from Disk1",
      "retryOnFail": false,
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "command": "rm -rf /Users/matt/Desktop/Bruh/*"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -260,
        1740
      ],
      "id": "b3618499-6f4a-41f0-80f1-ef41da554b8e",
      "name": "Execute Command5"
    },
    {
      "parameters": {
        "command": "rm -rf /Users/matt/Desktop/AME_Output/*"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -80,
        1740
      ],
      "id": "178fb8bd-d219-4395-a424-91fc6c8759f7",
      "name": "Execute Command6"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 0 31 2 *"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -480,
        1740
      ],
      "id": "b81a124d-202b-4808-bd84-953d186fbff0",
      "name": "Schedule Trigger5"
    },
    {
      "parameters": {
        "content": "# Remove Files\n",
        "height": 260,
        "width": 840
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -620,
        1660
      ],
      "id": "e70878e5-c7a7-4c58-8243-b734b8cf563d",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "# Increasing Count & Cursor\n",
        "height": 460,
        "width": 1400,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2640,
        1660
      ],
      "id": "224dc484-666e-4f85-9f4a-07d52d4bc873",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "jsCode": "const axios = require('axios');\n\nconst openaiKey = $env.OPENAI_API_KEY;\n\nconst link = $json.postUrl || $json.url;\nconst customTitle = $json.customTitle;\nconst originalTitle = $json.originalTitle || $json.content || '';\nconst mediaUrl1 = $json.mediaUrl1 || '';\nconst mediaUrl2 = $json.mediaUrl2 || '';\nconst author = $json.author || 'Unknown';\n\nfunction cleanTweetText(text) {\n  return text?.replace(/https:\\/\\/t\\.co\\/\\w+/g, '').trim() || '';\n}\n\nasync function processWithGPT(text) {\n  if (!text || text.includes('unavailable') || text.includes('API restrictions')) {\n    return { processed: text, error: null };\n  }\n\n  try {\n    const gptResponse = await axios.post(\n      \"https://api.openai.com/v1/chat/completions\",\n      {\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"user\",\n            content: `Take the following text. If it is an interesting fact, news, or story, rewrite it, but keep the original meaning and information exactly the same. Do not add any new details or make anything up. Keep the rewrite as close to the original content as possible, just improving clarity and flow if needed, keeping the length relatively the same. If it is humorus or a meme, take the following text and return it exactly as written (unless there is a post title prefix. For example: \"TIL\", \"TIL that\", \"TIL of\", etc., you can remove those in any type of text). If there is no text given, don't return anything. I want a completely blank response if there is no text given. If there is any newlines in the text, remove those so it is one continuous block of text: \\n\\n\"${text}\"`\n          }\n        ],\n        temperature: 0.3,\n        max_tokens: 200\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${openaiKey}`,\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    );\n\n    let processed = gptResponse.data.choices[0].message.content.trim();\n    if (\n      (processed.startsWith('\"') && processed.endsWith('\"')) ||\n      (processed.startsWith(\"'\") && processed.endsWith(\"'\"))\n    ) {\n      processed = processed.slice(1, -1);\n    }\n\n    return { processed: processed.trim(), error: null };\n  } catch (error) {\n    return { processed: text, error: error.message };\n  }\n}\n\nconst titleToProcess = customTitle || originalTitle;\n\nconst gptResult = await processWithGPT(titleToProcess);\nconst processedTitle = gptResult.processed;\nconst gptProcessingError = gptResult.error;\n\nreturn [\n  {\n    json: {\n      title: cleanTweetText(processedTitle),\n      originalTitle: originalTitle,\n      customTitle,\n      imageUrl: mediaUrl1 || \"https://via.placeholder.com/800x600/1DA1F2/ffffff?text=Twitter+Post\",\n      postUrl: link,\n      postUrl2: mediaUrl2 || null,\n      author: author,\n      extractionMethod: \"from_parser_media_urls\",\n      source: 'twitter',\n      created: new Date().toISOString(),\n      gptProcessed: !gptProcessingError,\n      gptError: gptProcessingError,\n      success: true\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        1160
      ],
      "id": "d35294cc-aab5-495b-859d-c611d436e3a0",
      "name": "fetch_twitter_post"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE",
          "mode": "list",
          "cachedResultName": "Mega Scraper",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/198eVrwv-DsPmXNkl6N8UBOFMyLhzWOWrlvdxCMji_8w/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tweetId": "={{ $json.tweetId }}",
            "url": "={{ $json.url }}",
            "content": "={{ $json.content }}",
            "likeCount": "={{ $json.likeCount }}",
            "retweetCount": "={{ $json.retweetCount }}",
            "replyCount": "={{ $json.replyCount }}",
            "quoteCount": "={{ $json.quoteCount }}",
            "viewCount": "={{ $json.viewCount }}",
            "createdAt": "={{ $json.createdAt }}",
            "mediaUrl1": "={{ $json.mediaUrl1 }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "tweetId",
              "displayName": "tweetId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "likeCount",
              "displayName": "likeCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "retweetCount",
              "displayName": "retweetCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "replyCount",
              "displayName": "replyCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "quoteCount",
              "displayName": "quoteCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "createdAt",
              "displayName": "createdAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "mediaUrl1",
              "displayName": "mediaUrl1",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "mediaUrl2",
              "displayName": "mediaUrl2",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -3040,
        1440
      ],
      "id": "4b2925ee-ef98-475f-95a2-9d440bdb335f",
      "name": "Add to Sheet8",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "IBSllZPSYK4EDII0",
          "name": "Google Sheets account 4"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// This will cause the node to output no data\nreturn [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2840,
        1440
      ],
      "id": "9e7f3d17-5916-4b00-aff2-7285016275b7",
      "name": "Destroy Input15",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweet/advanced_search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "from:fasc1nate filter:videos min_faves:3000"
            },
            {
              "name": "queryType",
              "value": "Latest"
            },
            {
              "name": "cursor",
              "value": "={{ $('Counter').item.json.cursor2 }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3460,
        1660
      ],
      "id": "706ce2dc-40f2-4b09-a004-50e6a525c0e6",
      "name": "Get Tweets7",
      "credentials": {
        "httpHeaderAuth": {
          "id": "wfaQplzpG1UZAAtm",
          "name": "TwitterAPI"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweet/advanced_search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "from:InternetH0F filter:videos min_faves:5000"
            },
            {
              "name": "queryType",
              "value": "Latest"
            },
            {
              "name": "cursor",
              "value": "={{ $('Counter').item.json.cursor3 }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3460,
        1840
      ],
      "id": "f088b06e-6364-4f9d-a0f3-34a3b5c2a1cc",
      "name": "Get Tweets8",
      "credentials": {
        "httpHeaderAuth": {
          "id": "wfaQplzpG1UZAAtm",
          "name": "TwitterAPI"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const tweets = $input.item.json.tweets;\n\nif (tweets && Array.isArray(tweets)) {\n  return tweets.map(tweet => ({\n    json: {\n      tweetId: tweet.id,\n      url: tweet.url,\n      content: tweet.text?.replace(/https?:\\/\\/t\\.co\\/\\S+/g, '').trim() || '',\n      likeCount: tweet.likeCount || 0,\n      retweetCount: tweet.retweetCount || 0,\n      replyCount: tweet.replyCount || 0,\n      quoteCount: tweet.quoteCount || 0,\n      viewCount: tweet.viewCount || 0,\n      createdAt: tweet.createdAt || '',\n      mediaURL: $input.first().json.tweets[0].extendedEntities.media[0].media_url_https || ''\n    }\n  }));\n} \n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3260,
        1660
      ],
      "id": "3dbe712b-0132-4878-98f8-c6a5a049f993",
      "name": "Extract Info1"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE",
          "mode": "list",
          "cachedResultName": "Mega Scraper",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/198eVrwv-DsPmXNkl6N8UBOFMyLhzWOWrlvdxCMji_8w/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tweetId": "={{ $json.tweetId }}",
            "url": "={{ $json.url }}",
            "content": "={{ $json.content }}",
            "likeCount": "={{ $json.likeCount }}",
            "retweetCount": "={{ $json.retweetCount }}",
            "replyCount": "={{ $json.replyCount }}",
            "quoteCount": "={{ $json.quoteCount }}",
            "viewCount": "={{ $json.viewCount }}",
            "createdAt": "={{ $json.createdAt }}",
            "mediaUrl1": "={{ $json.mediaUrl1 }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "tweetId",
              "displayName": "tweetId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "likeCount",
              "displayName": "likeCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "retweetCount",
              "displayName": "retweetCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "replyCount",
              "displayName": "replyCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "quoteCount",
              "displayName": "quoteCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "createdAt",
              "displayName": "createdAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "mediaUrl1",
              "displayName": "mediaUrl1",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "mediaUrl2",
              "displayName": "mediaUrl2",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -3040,
        1660
      ],
      "id": "befb18a3-62a1-4113-a183-a73ca4d3fefb",
      "name": "Add to Sheet9",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "IBSllZPSYK4EDII0",
          "name": "Google Sheets account 4"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// This will cause the node to output no data\nreturn [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2840,
        1660
      ],
      "id": "105c7c68-415f-4d7a-9958-420681569a58",
      "name": "Destroy Input17",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const tweets = $input.item.json.tweets;\n\nif (tweets && Array.isArray(tweets)) {\n  return tweets.map(tweet => ({\n    json: {\n      tweetId: tweet.id,\n      url: tweet.url,\n      content: tweet.text?.replace(/https?:\\/\\/t\\.co\\/\\S+/g, '').trim() || '',\n      likeCount: tweet.likeCount || 0,\n      retweetCount: tweet.retweetCount || 0,\n      replyCount: tweet.replyCount || 0,\n      quoteCount: tweet.quoteCount || 0,\n      viewCount: tweet.viewCount || 0,\n      createdAt: tweet.createdAt || '',\n      mediaURL: $input.first().json.tweets[0].extendedEntities.media[0].media_url_https || ''\n    }\n  }));\n} \n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3260,
        1840
      ],
      "id": "4c2425b7-60c4-4c22-b49c-6d7bea66b3b8",
      "name": "Extract Info2"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE",
          "mode": "list",
          "cachedResultName": "Mega Scraper",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/198eVrwv-DsPmXNkl6N8UBOFMyLhzWOWrlvdxCMji_8w/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tweetId": "={{ $json.tweetId }}",
            "url": "={{ $json.url }}",
            "content": "={{ $json.content }}",
            "likeCount": "={{ $json.likeCount }}",
            "retweetCount": "={{ $json.retweetCount }}",
            "replyCount": "={{ $json.replyCount }}",
            "quoteCount": "={{ $json.quoteCount }}",
            "viewCount": "={{ $json.viewCount }}",
            "createdAt": "={{ $json.createdAt }}",
            "mediaUrl1": "={{ $json.mediaUrl1 }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "tweetId",
              "displayName": "tweetId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "likeCount",
              "displayName": "likeCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "retweetCount",
              "displayName": "retweetCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "replyCount",
              "displayName": "replyCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "quoteCount",
              "displayName": "quoteCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "createdAt",
              "displayName": "createdAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "mediaUrl1",
              "displayName": "mediaUrl1",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "mediaUrl2",
              "displayName": "mediaUrl2",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -3040,
        1840
      ],
      "id": "ef640e76-7acd-402b-96d4-29f88088f105",
      "name": "Add to Sheet10",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "IBSllZPSYK4EDII0",
          "name": "Google Sheets account 4"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// This will cause the node to output no data\nreturn [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2840,
        1840
      ],
      "id": "f38232d1-f28f-43d8-bffb-f613630abaaa",
      "name": "Destroy Input18",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE",
          "mode": "list",
          "cachedResultName": "Mega Scraper",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -2580,
        1440
      ],
      "id": "4f6ff111-26b1-4d26-b9e3-04e0a572bf15",
      "name": "Google Sheets11",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "IBSllZPSYK4EDII0",
          "name": "Google Sheets account 4"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "documentId": {
          "__rl": true,
          "value": "1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE",
          "mode": "list",
          "cachedResultName": "Mega Scraper",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ghOMNALD-HPmJA-bu-XxCIJISuYaDxdYLWBXLwfcXeE/edit#gid=0"
        },
        "numberToDelete": 100
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -2140,
        1960
      ],
      "id": "8fd46561-86c5-498c-be8e-2544140fbf40",
      "name": "Google Sheets14",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "IBSllZPSYK4EDII0",
          "name": "Google Sheets account 4"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// This will cause the node to output no data\nreturn [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -860,
        1760
      ],
      "id": "07f85a2a-0ac6-479b-9a66-6bc135495028",
      "name": "Destroy Input19",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "command": "rm -rf /Users/matt/Desktop/X2/*"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        20,
        1440
      ],
      "id": "6863a96b-2d42-498b-8e12-66db8fdaff2e",
      "name": "Execute Command1",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "={{$json[\"generatedImageUrl\"]}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        240,
        1160
      ],
      "id": "bacb0ef7-b5e7-401a-b731-0ab348e595ca",
      "name": "Download Image5",
      "retryOnFail": true,
      "maxTries": 5
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/Users/matt/Desktop/X_Images/{{ $binary.data.fileName }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        400,
        1160
      ],
      "id": "491d601a-a5b8-4e42-8d86-d5f1f1a0cd77",
      "name": "Read/Write Files from Disk8"
    },
    {
      "parameters": {
        "url": "={{$json[\"generatedImageUrl\"]}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1760,
        1080
      ],
      "id": "46529ed7-a41c-4cc6-9fda-27ce2d9a3325",
      "name": "Download Image",
      "retryOnFail": true,
      "maxTries": 5
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/Users/matt/Desktop/Reddit_Images/{{ $binary.data.fileName }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1920,
        1080
      ],
      "id": "3fa8589a-b573-420f-ac7e-e9b7c6d7c4ba",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1540,
        1060
      ],
      "id": "b1b22a94-b2cc-42a8-806a-b204a8db34ea",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "content": "# X/Reddit/Web Scraper\n## Author: Matthew Washburn \n## Version: Fall 2025",
        "height": 180,
        "width": 500,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -820,
        460
      ],
      "id": "8ff782df-a72a-4e64-8640-d809c5b3262f",
      "name": "Sticky Note5"
    }
  ],
  "pinData": {},
  "connections": {
    "Get Tweets": {
      "main": [
        [
          {
            "node": "Extract Info10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets Trigger1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "fetch_reddit_post2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate_gpt_reply2": {
      "main": [
        [
          {
            "node": "Generate Template2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch_reddit_post2": {
      "main": [
        [
          {
            "node": "generate_gpt_reply2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Tweets1": {
      "main": [
        [
          {
            "node": "Extract Info6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Tweets2": {
      "main": [
        [
          {
            "node": "Extract Info7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Tweets3": {
      "main": [
        [
          {
            "node": "Extract Info9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Tweets4": {
      "main": [
        [
          {
            "node": "Extract Info8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate_gpt_reply7": {
      "main": [
        [
          {
            "node": "generate image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch_reddit_post7": {
      "main": [
        [
          {
            "node": "generate_gpt_reply7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Counter5": {
      "main": [
        [
          {
            "node": "Get Tweets5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Count5": {
      "main": [
        [
          {
            "node": "Counter5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        [
          {
            "node": "Get Tweets1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Tweets5": {
      "main": [
        [
          {
            "node": "Extract Info5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to Sheet5": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Info5": {
      "main": [
        [
          {
            "node": "Check If Interesting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Increase": {
      "main": [
        [
          {
            "node": "Increase Count",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Increase Count": {
      "main": [
        [
          {
            "node": "Set Count and Cursor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Set Increase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Count and Cursor": {
      "main": [
        [
          {
            "node": "Counter5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets10": {
      "main": [
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code8": {
      "main": [
        [
          {
            "node": "Destroy Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items5": {
      "main": [
        [
          {
            "node": "Google Sheets13",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "fetch_twitter_post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Destroy Input11": {
      "main": [
        [
          {
            "node": "Google Sheets10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to Sheet": {
      "main": [
        [
          {
            "node": "Destroy Input13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to Sheet2": {
      "main": [
        [
          {
            "node": "Destroy Input12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to Sheet3": {
      "main": [
        [
          {
            "node": "Destroy Input14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Destroy Input13": {
      "main": [
        [
          {
            "node": "Get Tweets2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Destroy Input12": {
      "main": [
        [
          {
            "node": "Get Tweets3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Destroy Input14": {
      "main": [
        [
          {
            "node": "Get Tweets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to Sheet4": {
      "main": [
        [
          {
            "node": "Destroy Input11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate_gpt_reply3": {
      "main": [
        [
          {
            "node": "Generate Template3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Template3": {
      "main": [
        [
          {
            "node": "Download Image5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Scraping": {
      "main": [
        [
          {
            "node": "Set Count5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If Interesting": {
      "main": [
        [
          {
            "node": "Add to Sheet5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Info6": {
      "main": [
        [
          {
            "node": "Add to Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Info7": {
      "main": [
        [
          {
            "node": "Add to Sheet7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Info8": {
      "main": [
        [
          {
            "node": "Add to Sheet2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to Sheet7": {
      "main": [
        [
          {
            "node": "Destroy Input16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Destroy Input16": {
      "main": [
        [
          {
            "node": "Get Tweets4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Info9": {
      "main": [
        [
          {
            "node": "Add to Sheet3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Info10": {
      "main": [
        [
          {
            "node": "Add to Sheet4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Destroy Input": {
      "main": [
        [
          {
            "node": "Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets": {
      "main": [
        [
          {
            "node": "Loop Over Items5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets13": {
      "main": [
        [
          {
            "node": "Destroy Input1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "fetch_reddit_post7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Destroy Input1": {
      "main": [
        [
          {
            "node": "fetch_reddit_post7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Facts": {
      "main": [
        [
          {
            "node": "Generate Facts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Facts": {
      "main": [
        [
          {
            "node": "Extract Each Fact",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Each Fact": {
      "main": [
        [
          {
            "node": "Loop Over Facts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Fact": {
      "main": [
        [
          {
            "node": "Generate Templated Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Templated Image": {
      "main": [
        [
          {
            "node": "Get Search Term",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Search Term": {
      "main": [
        [
          {
            "node": "Download Clip",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Clip": {
      "main": [
        [
          {
            "node": "Loop Over Facts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Facts": {
      "main": [
        [],
        [
          {
            "node": "Respond to Fact",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Facts1": {
      "main": [
        [
          {
            "node": "Generate Facts1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Facts1": {
      "main": [
        [
          {
            "node": "Extract Each Fact1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Each Fact1": {
      "main": [
        [
          {
            "node": "Loop Over Facts1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Fact1": {
      "main": [
        [
          {
            "node": "Templated 2 Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Facts1": {
      "main": [
        [],
        [
          {
            "node": "Respond to Fact1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Templated 2 Images": {
      "main": [
        [
          {
            "node": "Templated One Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Templated One Image": {
      "main": [
        [
          {
            "node": "Loop Over Facts1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger3": {
      "main": [
        [
          {
            "node": "Set Facts1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger4": {
      "main": [
        [
          {
            "node": "Set Facts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate image": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Download Twitter Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Tweets6": {
      "main": [
        [
          {
            "node": "Extract Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Info": {
      "main": [
        [
          {
            "node": "Add to Sheet8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GPT_Video_Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GPT_Video_Reply": {
      "main": [
        [
          {
            "node": "Generate Template4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Template4": {
      "main": [
        [
          {
            "node": "Download Templated Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Templated Image": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk3": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Twitter Video": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scale Video": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "Execute Command2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command2": {
      "main": [
        [
          {
            "node": "Execute Command1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Scale Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command3": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Counter": {
      "main": [
        [
          {
            "node": "Google Sheets14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Count": {
      "main": [
        [
          {
            "node": "Counter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [],
        [
          {
            "node": "Destroy Input19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Increase1": {
      "main": [
        [
          {
            "node": "Increase Count1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Increase Count1": {
      "main": [
        [
          {
            "node": "Set Count and Cursor1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Count and Cursor1": {
      "main": [
        [
          {
            "node": "Counter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit1": {
      "main": [
        [
          {
            "node": "Set Increase1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger6": {
      "main": [
        [
          {
            "node": "Set Count",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk1": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command5": {
      "main": [
        [
          {
            "node": "Execute Command6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger5": {
      "main": [
        [
          {
            "node": "Execute Command5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch_twitter_post": {
      "main": [
        [
          {
            "node": "generate_gpt_reply3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to Sheet8": {
      "main": [
        [
          {
            "node": "Destroy Input15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Destroy Input15": {
      "main": [
        [
          {
            "node": "Get Tweets7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Tweets7": {
      "main": [
        [
          {
            "node": "Extract Info1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Info1": {
      "main": [
        [
          {
            "node": "Add to Sheet9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to Sheet9": {
      "main": [
        [
          {
            "node": "Destroy Input17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Destroy Input17": {
      "main": [
        [
          {
            "node": "Get Tweets8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Info2": {
      "main": [
        [
          {
            "node": "Add to Sheet10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to Sheet10": {
      "main": [
        [
          {
            "node": "Destroy Input18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Tweets8": {
      "main": [
        [
          {
            "node": "Extract Info2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Destroy Input18": {
      "main": [
        [
          {
            "node": "Google Sheets11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets11": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets14": {
      "main": [
        [
          {
            "node": "Get Tweets6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Destroy Input19": {
      "main": [
        [
          {
            "node": "Limit1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command1": {
      "main": [
        [
          {
            "node": "Execute Command3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Image5": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk8": {
      "main": [
        [
          {
            "node": "Loop Over Items5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Image": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Download Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2280d145-ad62-4fe7-bfb8-2e92f370da3d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8337dd42d2dbf5575f0094a20a9bf5a3c8da69b0e6cb4a20afe8ce60c6079453"
  },
  "id": "vfuJoGCWlC1so1qv",
  "tags": []
}